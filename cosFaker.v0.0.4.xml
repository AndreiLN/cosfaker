<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-32) 2015.2.1 (Build 705U)" ts="2017-04-03 09:19:56">
<Class name="cosFaker.Address">
<Super>%RegisteredObject</Super>
<TimeChanged>64037,48509.303778</TimeChanged>
<TimeCreated>64037,29468.065211</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/*

 @method faker.address.latitude

  this.latitude = function () {
      return (faker.random.number(180 * 10000) / 10000.0 - 90.0).toFixed(4);
  }
   * @method faker.address.longitude

  this.longitude = function () {
      return (faker.random.number(360 * 10000) / 10000.0 - 180.0).toFixed(4);
  }
   this.city = function (format) {
    var formats = [
      '{{address.cityPrefix}} {{name.firstName}}{{address.citySuffix}}',
      '{{address.cityPrefix}} {{name.firstName}}',
      '{{name.firstName}}{{address.citySuffix}}',
      '{{name.lastName}}{{address.citySuffix}}'
    ];

    if (typeof format !== "number") {
      format = faker.random.number(formats.length - 1);
    }

    return f(formats[format]);

  }

  **
   * Return a random localized city prefix
   * @method faker.address.cityPrefix
   *
  this.cityPrefix = function () {
    return faker.random.arrayElement(faker.definitions.address.city_prefix);
  }

  **
   * Return a random localized city suffix
   *
   * @method faker.address.citySuffix
   *
  this.citySuffix = function () {
    return faker.random.arrayElement(faker.definitions.address.city_suffix);
  }

  **
   * Returns a random localized street name
   *
   * @method faker.address.streetName
   *
  this.streetName = function () {
      var result;
      var suffix = faker.address.streetSuffix();
      if (suffix !== "") {
          suffix = " " + suffix
      }

      switch (faker.random.number(1)) {
      case 0:
          result = faker.name.lastName() + suffix;
          break;
      case 1:
          result = faker.name.firstName() + suffix;
          break;
      }
      return result;
  }

  //
  // TODO: change all these methods that accept a boolean to instead accept an options hash.
  //
  **
   * Returns a random localized street address
   *
   * @method faker.address.streetAddress
   * @param {Boolean} useFullAddress
   *
  this.streetAddress = function (useFullAddress) {
      if (useFullAddress === undefined) { useFullAddress = false; }
      var address = "";
      switch (faker.random.number(2)) {
      case 0:
          address = Helpers.replaceSymbolWithNumber("#####") + " " + faker.address.streetName();
          break;
      case 1:
          address = Helpers.replaceSymbolWithNumber("####") +  " " + faker.address.streetName();
          break;
      case 2:
          address = Helpers.replaceSymbolWithNumber("###") + " " + faker.address.streetName();
          break;
      }
      return useFullAddress ? (address + " " + faker.address.secondaryAddress()) : address;
  }

 **
   * streetSuffix
   *
   * @method faker.address.streetSuffix
   /
  this.streetSuffix = function () {
      return faker.random.arrayElement(faker.definitions.address.street_suffix);
  }
  
 /**
   * streetPrefix
   *
   * @method faker.address.streetPrefix
   /
  this.streetPrefix = function () {
      return faker.random.arrayElement(faker.definitions.address.street_prefix);
  }

   * secondaryAddress
   *
   * @method faker.address.secondaryAddress
  this.secondaryAddress = function () {
      return Helpers.replaceSymbolWithNumber(faker.random.arrayElement(
          [
              'Apt. ###',
              'Suite ###'
          ]
      ));
  }


Centro Curitiba Lat -25.429 Lon -49.2671

*/
]]></Content>
</UDLText>

<Method name="StreetSuffix">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $List($ListFromString("Doutor,,Marechal,Padre,,Almirante,General,Monsenhor,,Conselheiro",","),$Random(10)+1)
]]></Implementation>
</Method>

<Method name="StreetPrefix">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $List($ListFromString("Rua,Avenida,Travessa,Ponte,Alameda,Marginal,Viela,Rodovia",","),$Random(8)+1)
]]></Implementation>
</Method>

<Method name="StreetName">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	S suffix = ..StreetSuffix()
	S:suffix'="" suffix = suffix _ " " 
	Q ..StreetPrefix() _ " " _ suffix _  ##class(cosFaker.Name).FullName(2)
]]></Implementation>
</Method>

<Method name="Latitude">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	Quit ($Random(180 * 10000) / 10000.0) - 90.0
]]></Implementation>
</Method>

<Method name="Longitude">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	Quit ($Random(360 * 10000) / 10000.0 ) - 180.0
]]></Implementation>
</Method>
</Class>


<Class name="cosFaker.App">
<Super>%RegisteredObject</Super>
<TimeChanged>64016,57122.573</TimeChanged>
<TimeCreated>64016,37345.119926</TimeCreated>

<Method name="FunctionName">
<ClassMethod>1</ClassMethod>
<FormalSpec>pGroup="",pSeparator:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	S:pSeparator="" pSeparator = " "
	S action = ##class(cosFaker.Data.PtBr).AppAction(pGroup)
	S function = ##class(cosFaker.Data.PtBr).AppType()
	Q action _ pSeparator _ function
]]></Implementation>
</Method>
</Class>


<Class name="cosFaker.Coffee">
<Super>cosFaker.lib.core</Super>
<TimeChanged>64371,32335.058509</TimeChanged>
<TimeCreated>64371,30348.032219</TimeCreated>

<Method name="BlendName">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	S name1 = ..Sample($LB("Summer", "Holiday", "Jacked", "Joe", "Express", "Reg's", "Split", "Spilt", "Chocolate", "Dark", "Veranda", "Major", "Bluebery", "American", "Huggy", "Wake-up", "Morning", "Evening", "Winter", "Captain's", "Thanksgiving", "Seattle", "Brooklyn", "Café", "Blacktop", "Pumpkin-spice", "Good-morning", "Postmodern", "The Captain's", "The", "Cascara", "Melty", "Heart", "Goodbye", "Hello", "Street", "Red", "Blue", "Green", "Strong", "KrebStar", "Kreb-Full-o"))
	S name2 = ..Sample($ListBuild("Solstice", "Blend", "Level", "Enlightenment", "Cowboy", "", "Choice", "Select", "Equinox", "Star", "Forrester", "Java", "Symphony", "Utopia", "Cup", "Mug", "Been", "Bean", "Cake", "Extract", "Delight", "Pie", "America", "Treat", "Volcano", "Breaker", "Town", "Light", "Look", "Coffee", "Nuts"))
	Quit name1_" "_name2
]]></Implementation>
</Method>

<Method name="Variety">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit ..Sample($ListBuild("Liberica", "S288", "S795", "Kent", "Java", "Dilla", "Sumatara", "Catuai", "Pacamara", "Mundo Novo", "Red Bourbon", "Bourbon", "Yellow Bourbon", "Pacas", "Caturra", "Pink Bourbon", "Colombia", "Obata", "Catimors", "Sarchimor", "Mokka", "Kaffa", "Gimma", "Tafari-Kela", "S.4", "Agaro", "Dega", "Barbuk Sudan", "Ennarea", "Geisha", "Gesha", "Blue Mountain", "Kona", "San Ramon", "SL28", "SL34", "Villa Sarchi", "Villalobos", "Typica", "Ethiopian Heirloom"))
]]></Implementation>
</Method>

<Method name="Notes">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set intensifier = ..Sample($ListBuild("muted", "dull", "mild", "structured", "balanced", "rounded", "soft", "faint", "delicate", "dry", "astringent", "quick", "clean", "crisp", "bright", "vibrant", "tart", "wild", "unbalanced", "sharp", "pointed", "dense", "deep", "complex", "juicy", "lingering", "dirty"))
	Set body = ..Sample($ListBuild("watery", "tea-like", "silky", "slick", "juicy", "smooth", "syrupy", "round", "creamy", "full", "velvety", "big", "chewy", "coating"))
	
	For k=1:1:3 {
		Set $List(descriptor,*+1) = ..Sample($ListBuild("bergamot", "hops", "black-tea", "green-tea", "mint", "sage", "dill", "grassy", "snow pea", "sweet pea", "mushroom", "squash", "green pepper", "olive", "leafy greens", "hay", "tobacco", "cedar", "fresh wood", "soil", "tomato", "sundried tomato", "soy sauce", "leathery", "clove", "liquorice", "curry", "nutmeg", "ginger", "corriander", "cinnamon", "white pepper", "black pepper", "carbon", "smokey", "burnt sugar", "toast", "fresh bread", "barley", "wheat", "rye", "graham cracker", "granola", "almond", "hazelnut", "pecan", "cashew", "peanut", "walnut", "cola", "molasses", "maple syrup", "carmel", "brown sugar", "sugar cane", "marshmallow", "cream", "butter", "honey", "nougat", "vanilla", "milk chocolate", "cocoa powder", "bittersweet chocolate", "bakers chocolate", "cacao nibs", "prune", "dates", "figs", "raisin", "golden raisin", "black currant", "red currant", "blueberry", "strawberry", "raspberry", "cranberry", "black cherry", "cherry", "plum", "apricot", "nectarine", "peach", "coconut", "banana", "kiwi", "mango", "papaya", "pineapple", "passion fruit", "tamarind", "star fruit", "lychee", "concord grape", "red grape", "green grape", "white grape", "cantaloupe", "honeydew", "watermelon", "red apple", "green apple", "orange", "mandarin", "tangerine", "clementine", "grapefruit", "lime", "meyer lemon", "lemonade", "lemon", "orange creamsicle", "marzipan", "nutella", "lemongrass", "orange blossom", "jasmine", "honeysuckle", "magnolia", "lavender", "rose hips", "hibiscus", "lemon verbena", "medicinal", "quakery", "baggy", "potato defect!", "musty", "rubber"))
	}
	
	Quit intensifier _ ", "_body_", "_$List(descriptor,1)_", "_$List(descriptor,2)_", "_$List(descriptor,3)
]]></Implementation>
</Method>

<Method name="Origin">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set country = ..Sample($ListBuild("Brazil", "Colombia", "Sumatra", "Ethiopia", "Honduras", "Kenya", "Uganda", "Mexico", "Guatemala", "Nicaragua", "Costa Rica", "Tanzania", "El Salvador", "Rwanda", "Burundi", "Panama", "Yemen", "India"))

	Set region = ##class(%ArrayOfDataTypes).%New()	
	Do region.SetAt($ListBuild("Sul Minas", "Mogiana", "Cerrado"),"brazil")
	Do region.SetAt($ListBuild("Nariño", "Huila", "Tolima", "Cauca", "Casanare", "Santander", "Antioquia", "Cundinamarca", "Boyacá"),"colombia")
	Do region.SetAt($ListBuild("Tapanuli", "Lintong", "Aceh", "Lake Tawar", "Lintong", "Gayo"),"sumatra")
	Do region.SetAt($ListBuild("Sidama", "Harrar", "Limu", "Ojimmah", "Lekempti", "Wellega", "Gimbi"),"ethiopia")
	Do region.SetAt($ListBuild("Agalta", "Comayagua", "Copan", "Montecillos", "Opalca", "El Paraiso"),"honduras")
	Do region.SetAt($ListBuild("Bungoma", "Embu", "Kiamba", "Kirinyaga", "Mt. Kenya", "Kisii", "Meru", "Murang'a", "Machakos", "Thika", "Nyeri", "Nakuru", "Nyanza", "Kericho"),"kenya")
	Do region.SetAt($ListBuild("Bugisu", "Mount Elgon", "Kibale"),"uganda")
	Do region.SetAt($ListBuild("Chiapas", "Oaxaca", "Veracruz", "Colima", "San Luis Potosi", "Nayarit", "Hidalgo", "Puebla", "Jalisco"),"mexico")
	Do region.SetAt($ListBuild("Acatenango", "Antigua", "Atitlan", "Fraijanes", "Huehuetenango", "Nuevo Oriente", "Coban", "San Marcos"),"guatemala")
	Do region.SetAt($ListBuild("Matagalpa", "Jinotega", "Boaco", "Madriz", "Nueva Segovia", "Estelí", "Dipilto", "Jalapa", "Carazo", "Granada", "Masaya", "Managua", "Rivas"),"nicaragua")
	Do region.SetAt($ListBuild("Tarrazu", "Central Valley", "West Valley", "Guanacaste", "Tres Rios", "Turrialba", "Orosi", "Brunca"),"costa rica")
	Do region.SetAt($ListBuild("Western Region, Bukova", "Western Region, Kigoma", "Mbeya Region", "Southern Region, Mbinga", "Western Region, Tarime", "Northern Region, Oldeani", "Northern Region, Arusha", "Northern Region, Kilimanjaro", "Southern Region, Morogoro"),"tanzania")
	Do region.SetAt($ListBuild("Alotepec-Metapán", "Apaneca-Ilamatepec", "El Balsamo-Quetzaltepec", "Cacahuatique", "Chichontepec", "Tecapa-Chinameca"),"el salvador")
	Do region.SetAt($ListBuild("Rulindo", "Gishamwana Coffee Island", "Lake Kivu Region", "Kigeyo Washing Station", "Kabirizi"),"rwanda")
	Do region.SetAt($ListBuild("Kayanza"),"burundi")
	Do region.SetAt($ListBuild("Boquete", "Chiriqui", "Volcan"),"panama")
	Do region.SetAt($ListBuild("Mattari", "San'ani", "Hirazi", "Raimi"),"yemen")
	Do region.SetAt($ListBuild("Chikmagalur", "Coorg","Biligiris", "Bababudangiris", "Manjarabad", "Nilgiris", "Travancore", "Manjarabad", "Brahmaputra", "Pulneys", "Sheveroys"),"india")
	
	Quit ..Sample(region.GetAt($ZConvert(country,"l")))_", "_country
]]></Implementation>
</Method>
</Class>


<Class name="cosFaker.Commerce">
<TimeChanged>64357,33657.754236</TimeChanged>
<TimeCreated>64016,37345.119926</TimeCreated>

<Method name="Price">
<ClassMethod>1</ClassMethod>
<FormalSpec>pMin:%Integer=0,pMax:%Integer=1000,pDec:%Integer=2,pSymbol:%String=""</FormalSpec>
<Implementation><![CDATA[
	Set bOk = $$$NO, $Piece(dec,"9",pDec+1)="", $Piece(tmp,"0",pDec+1)=""
	
	While bOk = $$$NO {
		Set randdec = $Random(dec)
		Set rand = $Random(pMax ) _ "." _ randdec _ $Extract(tmp, 0, $Length(tmp)-$Length(randdec))
		Set:((rand >= pMin)&&(rand <= pMax)) bOk = $$$YES
	}
	
	Quit pSymbol _ rand
]]></Implementation>
</Method>

<Method name="CNPJ">
<ClassMethod>1</ClassMethod>
<FormalSpec>pPretty:%Boolean=1</FormalSpec>
<ReturnType>%String</ReturnType>
</Method>
</Class>


<Class name="cosFaker.Company">
<Super>cosFaker.lib.core</Super>
<TimeChanged>64364,55410.514178</TimeChanged>
<TimeCreated>64364,55329.019724</TimeCreated>

<Method name="Profession">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit ..Sample($ListBuild("teacher", "actor", "musician", "philosopher", "writer", "doctor", "accountant", "agriculturist", "architect", "economist", "engineer", "interpreter", "attorney at law", "advocate", "librarian", "statistician", "human resources", "firefighter", "judge", "police officer", "astronomer", "biologist", "chemist", "physicist", "programmer", "web developer", "designer"))
]]></Implementation>
</Method>

<Method name="Industry">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit ..Sample($ListBuild("Defense & Space", "Computer Hardware", "Computer Software", "Computer Networking", "Internet", "Semiconductors", "Telecommunications", "Law Practice", "Legal Services", "Management Consulting", "Biotechnology", "Medical Practice", "Hospital & Health Care", "Pharmaceuticals", "Veterinary", "Medical Devices", "Cosmetics", "Apparel & Fashion", "Sporting Goods", "Tobacco", "Supermarkets", "Food Production", "Consumer Electronics", "Consumer Goods", "Furniture", "Retail", "Entertainment", "Gambling & Casinos", "Leisure, Travel & Tourism", "Hospitality", "Restaurants", "Sports", "Food & Beverages", "Motion Pictures and Film", "Broadcast Media", "Museums and Institutions", "Fine Art", "Performing Arts", "Recreational Facilities and Services", "Banking", "Insurance", "Financial Services", "Real Estate", "Investment Banking", "Investment Management", "Accounting", "Construction", "Building Materials", "Architecture & Planning", "Civil Engineering", "Aviation & Aerospace", "Automotive", "Chemicals", "Machinery", "Mining & Metals", "Oil & Energy", "Shipbuilding", "Utilities", "Textiles", "Paper & Forest Products", "Railroad Manufacture", "Farming", "Ranching", "Dairy", "Fishery", "Primary / Secondary Education", "Higher Education", "Education Management", "Research", "Military", "Legislative Office", "Judiciary", "International Affairs", "Government Administration", "Executive Office", "Law Enforcement", "Public Safety", "Public Policy", "Marketing and Advertising", "Newspapers", "Publishing", "Printing", "Information Services", "Libraries", "Environmental Services", "Package / Freight Delivery", "Individual & Family Services", "Religious Institutions", "Civic & Social Organization", "Consumer Services", "Transportationg / Trucking / Railroad", "Warehousing", "Airlines / Aviation", "Maritime", "Information Technology and Services", "Market Research", "Public Relations and Communications", "Design", "Nonprofit Organization Management", "Fund-Raising", "Program Development", "Writing and Editing", "Staffing and Recruiting", "Professional Training & Coaching", "Venture Capital & Private Equity", "Political Organization", "Translation and Localization", "Computer Games", "Events Services", "Arts and Crafts", "Electrical / Electronic Manufacturing", "Online Media", "Nanotechnology", "Music", "Logistics and Supply Chain", "Plastics", "Computer & Network Security", "Wireless", "Alternative Dispute Resolution", "Security and Investigations", "Facilities Services", "Outsourcing / Offshoring", "Health, Wellness and Fitness", "Alternative Medicine", "Media Production", "Animation", "Commercial Real Estate", "Capital Markets", "Think Tanks", "Philanthropy", "E-Learning", "Wholesale", "Import and Export", "Mechanical or Industrial Engineering", "Photography", "Human Resources", "Business Supplies and Equipment", "Mental Health Care", "Graphic Design", "International Trade and Development", "Wine and Spirits", "Luxury Goods & Jewelry", "Renewables & Environment", "Glass, Ceramics & Concrete", "Packaging and Containers", "Industrial Automation", "Government Relations"))
]]></Implementation>
</Method>
</Class>


<Class name="cosFaker.Data.PtBr">
<Super>%RegisteredObject</Super>
<TimeChanged>64016,57272.17725</TimeChanged>
<TimeCreated>64016,39746.54747</TimeCreated>

<Method name="AppAction">
<ClassMethod>1</ClassMethod>
<FormalSpec>pGroup=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	S:pGroup="" pGroup = $ListGet($ListFromString("SQL,IF,FUN",","),$Random(3)+1)
	
	If pGroup = "SQL" {
		Set $List(actions,*+1) = "Buscar"
		Set $List(actions,*+1) = "Resultados"
		Set $List(actions,*+1) = "Persistir"
		Set $List(actions,*+1) = "Acessar"
		Set $List(actions,*+1) = "Integrar"
		Set $List(actions,*+1) = "Totalizar"
		Set $List(actions,*+1) = "Contar"
		Set $List(actions,*+1) = "Virtualizar"
		Set $List(actions,*+1) = "Consultar"
		Set $List(actions,*+1) = "Verificar"
		Set $List(actions,*+1) = "Gerar"

	}
	
	If pGroup = "IF" {
		Set $List(actions,*+1) = "Comparar"
		Set $List(actions,*+1) = "Verificar"
		Set $List(actions,*+1) = "Habilitar"
		Set $List(actions,*+1) = "Validar"
	}
	
	If pGroup = "FUN" {
		Set $List(actions,*+1) = "Calcular"
		Set $List(actions,*+1) = "Analisar"
		Set $List(actions,*+1) = "Executar"
		Set $List(actions,*+1) = "Atribuir"
		Set $List(actions,*+1) = "Gerar"
		Set $List(actions,*+1) = "Totalizar"

	}
	
		; S $List(actions,*+1) = ""
		
	Set output = $ListGet(actions,$Random($ListLength(actions)) + 1)
	Kill actions
	Quit output
]]></Implementation>
</Method>

<Method name="AppType">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set $List(things,*+1) = "ICMS"
	Set $List(things,*+1) = "Imposto"
	Set $List(things,*+1) = "Nota Fiscal"
	Set $List(things,*+1) = "Renda"
	Set $List(things,*+1) = "Venda"
	Set $List(things,*+1) = "Itens"
	Set $List(things,*+1) = "Loja"
	Set $List(things,*+1) = "Vendedor"
	Set $List(things,*+1) = "Produtos"
	Set $List(things,*+1) = "Região"
	Set $List(things,*+1) = "Localização"
	Set $List(things,*+1) = "Preços"
	;S $List(things,*+1) = ""
	
	Set output = $ListGet(things,$Random($ListLength(things)) + 1)
	Kill things
	Quit output
]]></Implementation>
</Method>

<Method name="AppName">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  	Set $List(appNames,*+1) = "Redhold"
  	Set $List(appNames,*+1) = "Treeflex"
  	Set $List(appNames,*+1) = "Trippledex"
  	Set $List(appNames,*+1) = "Kanlam"
  	Set $List(appNames,*+1) = "Bigtax"
  	Set $List(appNames,*+1) = "Daltfresh"
  	Set $List(appNames,*+1) = "Toughjoyfax"
  	Set $List(appNames,*+1) = "Mat Lam Tam"
  	Set $List(appNames,*+1) = "Otcom"
  	Set $List(appNames,*+1) = "Tres-Zap"
  	Set $List(appNames,*+1) = "Y-Solowarm"
  	Set $List(appNames,*+1) = "Tresom"
  	Set $List(appNames,*+1) = "Voltsillam"
  	Set $List(appNames,*+1) = "Biodex"
  	Set $List(appNames,*+1) = "Greenlam"
  	Set $List(appNames,*+1) = "Viva"
  	Set $List(appNames,*+1) = "Matsoft"
  	Set $List(appNames,*+1) = "Temp"
  	Set $List(appNames,*+1) = "Zoolab"
  	Set $List(appNames,*+1) = "Subin"
  	Set $List(appNames,*+1) = "Rank"
  	Set $List(appNames,*+1) = "Job"
  	Set $List(appNames,*+1) = "Stringtough"
  	Set $List(appNames,*+1) = "Tin"
  	Set $List(appNames,*+1) = "It"
  	Set $List(appNames,*+1) = "Home Ing"
  	Set $List(appNames,*+1) = "Zamit"
  	Set $List(appNames,*+1) = "Sonsing"
  	Set $List(appNames,*+1) = "Konklab"
  	Set $List(appNames,*+1) = "Alpha"
  	Set $List(appNames,*+1) = "Latlux"
  	Set $List(appNames,*+1) = "Voyatouch"
  	Set $List(appNames,*+1) = "Alphazap"
  	Set $List(appNames,*+1) = "Holdlamis"
  	Set $List(appNames,*+1) = "Zaam-Dox"
  	Set $List(appNames,*+1) = "Sub-Ex"
  	Set $List(appNames,*+1) = "Quo Lux"
  	Set $List(appNames,*+1) = "Bamity"
  	Set $List(appNames,*+1) = "Ventosanzap"
  	Set $List(appNames,*+1) = "Lotstring"
  	Set $List(appNames,*+1) = "Hatity"
  	Set $List(appNames,*+1) = "Tempsoft"
  	Set $List(appNames,*+1) = "Overhold"
  	Set $List(appNames,*+1) = "Fixflex"
  	Set $List(appNames,*+1) = "Konklux"
  	Set $List(appNames,*+1) = "Zontrax"
  	Set $List(appNames,*+1) = "Tampflex"
  	Set $List(appNames,*+1) = "Span"
  	Set $List(appNames,*+1) = "Namfix"
  	Set $List(appNames,*+1) = "Transcof"
  	Set $List(appNames,*+1) = "Stim"
  	Set $List(appNames,*+1) = "Fix San"
  	Set $List(appNames,*+1) = "Sonair"
  	Set $List(appNames,*+1) = "Stronghold"
  	Set $List(appNames,*+1) = "Fintone"
  	Set $List(appNames,*+1) = "Y-find"
  	Set $List(appNames,*+1) = "Opela"
  	Set $List(appNames,*+1) = "Lotlux"
  	Set $List(appNames,*+1) = "Ronstring"
  	Set $List(appNames,*+1) = "Zathin"
  	Set $List(appNames,*+1) = "Duobam"
  	Set $List(appNames,*+1) = "Keylex"
  	Set $List(appNames,*+1) = "Andalax"
  	Set $List(appNames,*+1) = "Solarbreeze"
  	Set $List(appNames,*+1) = "Cookley"
  	Set $List(appNames,*+1) = "Vagram"
  	Set $List(appNames,*+1) = "Aerified"
  	Set $List(appNames,*+1) = "Pannier"
  	Set $List(appNames,*+1) = "Asoka"
  	Set $List(appNames,*+1) = "Regrant"
  	Set $List(appNames,*+1) = "Wrapsafe"
  	Set $List(appNames,*+1) = "Prodder"
  	Set $List(appNames,*+1) = "Bytecard"
  	Set $List(appNames,*+1) = "Bitchip"
  	Set $List(appNames,*+1) = "Veribet"
  	Set $List(appNames,*+1) = "Gembucket"
  	Set $List(appNames,*+1) = "Cardguard"
  	Set $List(appNames,*+1) = "Bitwolf"
  	Set $List(appNames,*+1) = "Cardify"
  	Set $List(appNames,*+1) = "Domainer"
  	Set $List(appNames,*+1) = "Flowdesk"
  	Set $List(appNames,*+1) = "Flexidy"
		
	Set output = $ListGet(appNames,$Random($ListLength(appNames)) + 1)
        ; ["ability"S $List(appNames,*+1) = "access"S $List(appNames,*+1) = "adapter"S $List(appNames,*+1) = "algorithm"S $List(appNames,*+1) = "alliance"S $List(appNames,*+1) = "analyzer"S $List(appNames,*+1) = "application"S $List(appNames,*+1) = "approach"S $List(appNames,*+1) = "architecture"S $List(appNames,*+1) = "archive"S $List(appNames,*+1) = "artificial intelligence"S $List(appNames,*+1) = "array"S $List(appNames,*+1) = "attitude"S $List(appNames,*+1) = "benchmark"S $List(appNames,*+1) = "budgetary management"S $List(appNames,*+1) = "capability"S $List(appNames,*+1) = "capacity"S $List(appNames,*+1) = "challenge"S $List(appNames,*+1) = "circuit"S $List(appNames,*+1) = "collaboration"S $List(appNames,*+1) = "complexity"S $List(appNames,*+1) = "concept"S $List(appNames,*+1) = "conglomeration"S $List(appNames,*+1) = "contingency"S $List(appNames,*+1) = "core"S $List(appNames,*+1) = "customer loyalty"S $List(appNames,*+1) = "database"S $List(appNames,*+1) = "data-warehouse"S $List(appNames,*+1) = "definition"S $List(appNames,*+1) = "emulation"S $List(appNames,*+1) = "encoding"S $List(appNames,*+1) = "encryption"S $List(appNames,*+1) = "extranet"S $List(appNames,*+1) = "firmware"S $List(appNames,*+1) = "flexibility"S $List(appNames,*+1) = "focus group"S $List(appNames,*+1) = "forecast"S $List(appNames,*+1) = "frame"S $List(appNames,*+1) = "framework"S $List(appNames,*+1) = "function"S $List(appNames,*+1) = "functionalities"S $List(appNames,*+1) = "Graphic Interface"S $List(appNames,*+1) = "groupware"S $List(appNames,*+1) = "Graphical User Interface"S $List(appNames,*+1) = "hardware"S $List(appNames,*+1) = "help-desk"S $List(appNames,*+1) = "hierarchy"S $List(appNames,*+1) = "hub"S $List(appNames,*+1) = "implementation"S $List(appNames,*+1) = "info-mediaries"S $List(appNames,*+1) = "infrastructure"S $List(appNames,*+1) = "initiative"S $List(appNames,*+1) = "installation"S $List(appNames,*+1) = "instruction set"S $List(appNames,*+1) = "interface"S $List(appNames,*+1) = "internet solution"S $List(appNames,*+1) = "intranet"S $List(appNames,*+1) = "knowledge user"S $List(appNames,*+1) = "knowledge base"S $List(appNames,*+1) = "local area network"S $List(appNames,*+1) = "leverage"S $List(appNames,*+1) = "matrices"S $List(appNames,*+1) = "matrix"S $List(appNames,*+1) = "methodology"S $List(appNames,*+1) = "middleware"S $List(appNames,*+1) = "migration"S $List(appNames,*+1) = "model"S $List(appNames,*+1) = "moderator"S $List(appNames,*+1) = "monitoring"S $List(appNames,*+1) = "moratorium"S $List(appNames,*+1) = "neural-net"S $List(appNames,*+1) = "open architecture"S $List(appNames,*+1) = "open system"S $List(appNames,*+1) = "orchestration"S $List(appNames,*+1) = "paradigm"S $List(appNames,*+1) = "parallelism"S $List(appNames,*+1) = "policy"S $List(appNames,*+1) = "portal"S $List(appNames,*+1) = "pricing structure"S $List(appNames,*+1) = "process improvement"S $List(appNames,*+1) = "product"S $List(appNames,*+1) = "productivity"S $List(appNames,*+1) = "project"S $List(appNames,*+1) = "projection"S $List(appNames,*+1) = "protocol"S $List(appNames,*+1) = "secured line"S $List(appNames,*+1) = "service-desk"S $List(appNames,*+1) = "software"S $List(appNames,*+1) = "solution"S $List(appNames,*+1) = "standardization"S $List(appNames,*+1) = "strategy"S $List(appNames,*+1) = "structure"S $List(appNames,*+1) = "success"S $List(appNames,*+1) = "superstructure"S $List(appNames,*+1) = "support"S $List(appNames,*+1) = "synergy"S $List(appNames,*+1) = "system engine"S $List(appNames,*+1) = "task-force"S $List(appNames,*+1) = "throughput"S $List(appNames,*+1) = "time-frame"S $List(appNames,*+1) = "toolset"S $List(appNames,*+1) = "utilisation"S $List(appNames,*+1) = "website"S $List(appNames,*+1) = "workforce"]
	
	Kill appNames
	Quit output
]]></Implementation>
</Method>

<Method name="LastName">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set $List(lastName, *+1) = "Silva"
	Set $List(lastName, *+1) = "Souza"
	Set $List(lastName, *+1) = "Carvalho"
	Set $List(lastName, *+1) = "Santos"
	Set $List(lastName, *+1) = "Reis"
	Set $List(lastName, *+1) = "Xavier"
	Set $List(lastName, *+1) = "Franco"
	Set $List(lastName, *+1) = "Braga"
	Set $List(lastName, *+1) = "Macedo"
	Set $List(lastName, *+1) = "Batista"
	Set $List(lastName, *+1) = "Barreto"
	Set $List(lastName, *+1) = "Barros"
	Set $List(lastName, *+1) = "Moraes"
	Set $List(lastName, *+1) = "Malta"
	Set $List(lastName, *+1) = "Carmello"
	Set $List(lastName, *+1) = "Mengga"
	Set $List(lastName, *+1) = "Costa"
	Set $List(lastName, *+1) = "Rodrigues"
	Set $List(lastName, *+1) = "Pereira"
	Set $List(lastName, *+1) = "Melo"
	Set $List(lastName, *+1) = "Saraiva"
	Set $List(lastName, *+1) = "Nogueira"
	Set $List(lastName, *+1) = "Oliveira"
	Set $List(lastName, *+1) = "Martins"
	Set $List(lastName, *+1) = "Moreira"
	Set $List(lastName, *+1) = "Lima"
	Set $List(lastName, *+1) = "Vaz"
	Set $List(lastName, *+1) = "Albuquerque"
    Set $List(lastName, *+1) = "Almeida"
    Set $List(lastName, *+1) = "Alves"
    Set $List(lastName, *+1) = "Aragão"
    Set $List(lastName, *+1) = "Araújo"
    Set $List(lastName, *+1) = "Barbosa"
    Set $List(lastName, *+1) = "Brito"
    Set $List(lastName, *+1) = "Caldeira"
    Set $List(lastName, *+1) = "Campos"
    Set $List(lastName, *+1) = "Cardoso"
    Set $List(lastName, *+1) = "Cardoso"
    Set $List(lastName, *+1) = "Carvalho"
    Set $List(lastName, *+1) = "Castro"
    Set $List(lastName, *+1) = "Cavalcante"
    Set $List(lastName, *+1) = "Cavalcanti"
    Set $List(lastName, *+1) = "da Conceição"
    Set $List(lastName, *+1) = "da Costa"
    Set $List(lastName, *+1) = "da Cruz"
    Set $List(lastName, *+1) = "da Cunha"
    Set $List(lastName, *+1) = "da Luz"
    Set $List(lastName, *+1) = "da Mata"
    Set $List(lastName, *+1) = "da Mota"
    Set $List(lastName, *+1) = "da Paz"
    Set $List(lastName, *+1) = "da Rocha"
    Set $List(lastName, *+1) = "da Rosa"
    Set $List(lastName, *+1) = "das Neves"
    Set $List(lastName, *+1) = "Dias"
    Set $List(lastName, *+1) = "Duarte"
    Set $List(lastName, *+1) = "Farias"
    Set $List(lastName, *+1) = "Fernandes"
    Set $List(lastName, *+1) = "Ferreira"
    Set $List(lastName, *+1) = "Fogaça"
    Set $List(lastName, *+1) = "Freitas"
    Set $List(lastName, *+1) = "Gomes"
    Set $List(lastName, *+1) = "Gonçalves"
    Set $List(lastName, *+1) = "Lopes"
    Set $List(lastName, *+1) = "Mendes"
    Set $List(lastName, *+1) = "Monteiro"
    Set $List(lastName, *+1) = "Moura"
    Set $List(lastName, *+1) = "Nascimento"
    Set $List(lastName, *+1) = "Novaes"
    Set $List(lastName, *+1) = "Nunes"
    Set $List(lastName, *+1) = "Peixoto"
    Set $List(lastName, *+1) = "Pinheiro"
    Set $List(lastName, *+1) = "Pires"
    Set $List(lastName, *+1) = "Porto"
    Set $List(lastName, *+1) = "Ramos"
    Set $List(lastName, *+1) = "Rezende"
    Set $List(lastName, *+1) = "Ribeiro"
    Set $List(lastName, *+1) = "Rocha"
    Set $List(lastName, *+1) = "Sales"
    Set $List(lastName, *+1) = "Silveira"
    Set $List(lastName, *+1) = "Teixeira"
    Set $List(lastName, *+1) = "Viana"
    Set $List(lastName, *+1) = "Vieira"
	Set output = $ListGet(lastName,$Random($ListLength(lastName)) + 1)
	Kill lastName
	Quit output
]]></Implementation>
</Method>

<Method name="PersonSuffix">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set $List(PersonSuffix, *+1) = "Jr."
  	Set $List(PersonSuffix, *+1) = "Neto"
	Set $List(PersonSuffix, *+1) = "Filho"
	Set output = $ListGet(PersonSuffix,$Random($ListLength(PersonSuffix)) + 1)
	Kill PersonSuffix
	Quit output
]]></Implementation>
</Method>

<Method name="CompanySuffix">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set $List(CompanySuffix, *+1) = "EIRELI"
	Set $List(CompanySuffix, *+1) = "S.A."
	Set $List(CompanySuffix, *+1) = "LTDA"
	Set $List(CompanySuffix, *+1) = "e Associados"
	Set $List(CompanySuffix, *+1) = "Comércio"
	Set $List(CompanySuffix, *+1) = "Tecnologia"
	Set output = $ListGet(CompanySuffix,$Random($ListLength(CompanySuffix)) + 1)
	Kill CompanySuffix
	Quit output
]]></Implementation>
</Method>

<Method name="DomainSuffix">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set $List(domainSuffix, *+1) = "com"
  	Set $List(domainSuffix, *+1) = "biz"
  	Set $List(domainSuffix, *+1) = "info"
  	Set $List(domainSuffix, *+1) = "name"
  	Set $List(domainSuffix, *+1) = "net"
  	Set $List(domainSuffix, *+1) = "org"
	Set output = $ListGet(domainSuffix,$Random($ListLength(domainSuffix)) + 1)
	Kill domainSuffix
	Quit output
]]></Implementation>
</Method>

<Method name="EmailProvider">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set $List(freeEmailprovider, *+1) = "gmail.com"
  	Set $List(freeEmailprovider, *+1) = "yahoo.com"
	Set $List(freeEmailprovider, *+1) = "hotmail.com"
  	Set $List(freeEmailprovider, *+1) = "bol.com.br"
	Set output = $ListGet(freeEmailprovider,$Random($ListLength(freeEmailprovider)) + 1)
	Kill freeEmailprovider
	Quit output
]]></Implementation>
</Method>

<Method name="FemaleFirstName">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set $List(firstName, *+1) = "Alessandra"
	Set $List(firstName, *+1) = "Aline"
	Set $List(firstName, *+1) = "Bruna"
	Set $List(firstName, *+1) = "Carla"
	Set $List(firstName, *+1) = "Célia"
	Set $List(firstName, *+1) = "Cecília"
	Set $List(firstName, *+1) = "Dalila"
	Set $List(firstName, *+1) = "Eduarda"
	Set $List(firstName, *+1) = "Esther"
	Set $List(firstName, *+1) = "Fabrícia"
	Set $List(firstName, *+1) = "Felícia"
	Set $List(firstName, *+1) = "Fabiana"
	Set $List(firstName, *+1) = "Isabel"
	Set $List(firstName, *+1) = "Isabela"
	Set $List(firstName, *+1) = "Joana"
	Set $List(firstName, *+1) = "Graziela"
	Set $List(firstName, *+1) = "Júlia"
	Set $List(firstName, *+1) = "Janaína"
	Set $List(firstName, *+1) = "Karla"
	Set $List(firstName, *+1) = "Lorena"
	Set $List(firstName, *+1) = "Lorraine"
	Set $List(firstName, *+1) = "Larissa"
	Set $List(firstName, *+1) = "Meire"
	Set $List(firstName, *+1) = "Marcela"
	Set $List(firstName, *+1) = "Margarida"
	Set $List(firstName, *+1) = "Mércia"
	Set $List(firstName, *+1) = "Márcia"
	Set $List(firstName, *+1) = "Marli"
	Set $List(firstName, *+1) = "Morgana"
	Set $List(firstName, *+1) = "Maria"
	Set $List(firstName, *+1) = "Marta"
	Set $List(firstName, *+1) = "Natália"
	Set $List(firstName, *+1) = "Núbia"
	Set $List(firstName, *+1) = "Ofélia"
	Set $List(firstName, *+1) = "Paula"
	Set $List(firstName, *+1) = "Rafaelly"
	Set $List(firstName, *+1) = "Rafaela"
	Set $List(firstName, *+1) = "Roberta"
	Set $List(firstName, *+1) = "Sílvia"
	Set $List(firstName, *+1) = "Silvana"
	Set $List(firstName, *+1) = "Suélen"
	Set $List(firstName, *+1) = "Sara"
	Set $List(firstName, *+1) = "Talita"
	Set $List(firstName, *+1) = "Vanessa"
	Set $List(firstName, *+1) = "Vitória"
	Set output = $ListGet(firstName,$Random($ListLength(firstName)) + 1)
	Kill firstName
	Quit output
]]></Implementation>
</Method>

<Method name="MaleFirstName">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set $List(firstName, *+1) = "Alessandro"
	Set $List(firstName, *+1) = "Alexandre"
	Set $List(firstName, *+1) = "Antônio"
	Set $List(firstName, *+1) = "Breno"
	Set $List(firstName, *+1) = "Carlos"
	Set $List(firstName, *+1) = "César"
	Set $List(firstName, *+1) = "Danilo"
	Set $List(firstName, *+1) = "Deneval"
	Set $List(firstName, *+1) = "Eduardo"
	Set $List(firstName, *+1) = "Elísio"
	Set $List(firstName, *+1) = "Fábio"
	Set $List(firstName, *+1) = "Fabrício"
	Set $List(firstName, *+1) = "Félix"
	Set $List(firstName, *+1) = "Felipe"
	Set $List(firstName, *+1) = "Feliciano"
	Set $List(firstName, *+1) = "Frederico"
	Set $List(firstName, *+1) = "Fabiano"
	Set $List(firstName, *+1) = "Gustavo"
	Set $List(firstName, *+1) = "Guilherme"
	Set $List(firstName, *+1) = "Gúbio"
	Set $List(firstName, *+1) = "Heitor"
	Set $List(firstName, *+1) = "Hélio"
	Set $List(firstName, *+1) = "Henry"
	Set $List(firstName, *+1) = "Hugo"
	Set $List(firstName, *+1) = "Ígor"
	Set $List(firstName, *+1) = "João"
	Set $List(firstName, *+1) = "Josemar"
	Set $List(firstName, *+1) = "Júlio César"
	Set $List(firstName, *+1) = "Júlio"
	Set $List(firstName, *+1) = "Kléber"
	Set $List(firstName, *+1) = "Lucas"
	Set $List(firstName, *+1) = "Luiggi"
	Set $List(firstName, *+1) = "Leandro"
	Set $List(firstName, *+1) = "Leonardo"
	Set $List(firstName, *+1) = "Ladislau"
	Set $List(firstName, *+1) = "Marcos"
	Set $List(firstName, *+1) = "Marcelo"
	Set $List(firstName, *+1) = "Mario"
	Set $List(firstName, *+1) = "Norberto"
	Set $List(firstName, *+1) = "Nataniel"
	Set $List(firstName, *+1) = "Paulo"
	Set $List(firstName, *+1) = "Pablo"
	Set $List(firstName, *+1) = "Pedro"
	Set $List(firstName, *+1) = "Raul"
	Set $List(firstName, *+1) = "Rafael"
	Set $List(firstName, *+1) = "Ricardo"
	Set $List(firstName, *+1) = "Roberto"
	Set $List(firstName, *+1) = "Silas"
	Set $List(firstName, *+1) = "Salvador"
	Set $List(firstName, *+1) = "Sirineu"
	Set $List(firstName, *+1) = "Tertuliano"
	Set $List(firstName, *+1) = "Vicente"
	Set $List(firstName, *+1) = "Víctor"
	Set $List(firstName, *+1) = "Yango"
	Set $List(firstName, *+1) = "Yago"
	Set $List(firstName, *+1) = "Yuri"
	Set $List(firstName, *+1) = "Washington"
	Set $List(firstName, *+1) = "Warley"
	Set output = $ListGet(firstName,$Random($ListLength(firstName)) + 1)
	Kill firstName
	Quit output
]]></Implementation>
</Method>
</Class>


<Class name="cosFaker.DragonBall">
<Super>cosFaker.lib.core</Super>
<TimeChanged>64371,30101.281513</TimeChanged>
<TimeCreated>64371,30101.281513</TimeCreated>

<Method name="Character">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set characters = $ListBuild("Goku", "Bulma", "Kami", "Yamcha", "Krillin", "Tien", "Piccolo", "Gohan", "Vegeta", "Kid Trunks", "Goten", "Future Trunks", "Pan", "Android 18", "Android 16", "Android 17", "Android 19", "Android 20", "Beerus", "Chaozu", "Chi-Chi", "Launch", "Mr. Satan", "Oolong", "Puar", "Videl", "Whis", "Yajirobe", "Demon King Piccolo", "Freeza", "Cell", "Majin Buu", "Goku Black", "Zamasu", "Baba", "Bra", "Bardock", "Champa", "Dende", "Dr. Gero", "Captain Ginyu", "Grandpa Gohan", "Jaco", "King Kai", "Supreme Kai", "Elder Kai", "Mr. Popo", "Nappa", "Uub", "Pilaf", "Raditz", "Shenron", "Vados", "Zarbon", "Broly", "Cooler", "King Cold", "Garlic Jr", "King Vegeta", "Nail", "Guru", "Hit", "Super Saiyan Goku", "Super Saiyan 2 Goku", "Super Saiyan 3 Goku", "Super Saiyan Vegeta", "Super Saiyan 2 Vegeta", "Majin Vegeta", "Super Saiyan Gohan", "Super Saiyan 2 Gohan", "Super Saiyan Goten", "Super Saiyan Trunks", "Vegito", "Gogeta", "Super Saiyan Blue Goku", "Super Saiyan Blue Vegeta", "Mystic Gohan")
	Quit ..Sample(characters)
]]></Implementation>
</Method>
</Class>


<Class name="cosFaker.File">
<TimeChanged>64364,38819.565345</TimeChanged>
<TimeCreated>64364,35841.95962</TimeCreated>

<Method name="Extension">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set ext = $ListBuild("flac", "mp3", "wav", "bmp", "gif", "jpeg", "jpg", "png", "tiff", "css", "csv", "html", "js", "json", "txt", "mp4", "avi", "mov", "webm", "doc", "docx", "xls", "xlsx", "ppt", "pptx", "odt", "ods", "odp", "pages", "numbers", "key", "pdf")
	Quit $List(ext, $Random($ListLength(ext))+1)
]]></Implementation>
</Method>

<Method name="MimeType">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set ext = $ListBuild("application/atom+xml", "application/ecmascript", "application/EDI-X12", "application/EDIFACT", "application/json", "application/javascript", "application/ogg", "application/pdf", "application/postscript", "application/rdf+xml", "application/rss+xml", "application/soap+xml", "application/font-woff", "application/xhtml+xml", "application/xml-dtd", "application/xop+xml", "application/zip", "application/gzip", "audio/basic", "audio/L24", "audio/mp4", "audio/mpeg", "audio/ogg", "audio/vorbis", "audio/vnd.rn-realaudio", "audio/vnd.wave", "audio/webm", "image/gif", "image/jpeg", "image/pjpeg", "image/png", "image/svg+xml", "image/tiff", "image/vnd.microsoft.icon", "message/http", "message/imdn+xml", "message/partial", "message/rfc822", "model/example", "model/iges", "model/mesh", "model/vrml", "model/x3d+binary", "model/x3d+vrml", "model/x3d+xml", "multipart/mixed", "multipart/alternative", "multipart/related", "multipart/form-data", "multipart/signed", "multipart/encrypted", "text/cmd", "text/css", "text/csv", "text/html", "text/javascript", "text/plain", "text/vcard", "text/xml", "video/mpeg", "video/mp4", "video/ogg", "video/quicktime", "video/webm", "video/x-matroska", "video/x-ms-wmv", "video/x-flv")
	Quit $List(ext, $Random($ListLength(ext))+1)
]]></Implementation>
</Method>

<Method name="Filename">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDir:%String="",pName:%String="",pExt:%String="",pDirectorySeparator:%String="/"</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set:pDir="" pDir = ##class(cosFaker.Internet).Slug()
	Set:pName="" pName = ##class(cosFaker.Lorem).Word()
	Set:pExt="" pExt = ..Extension()
	
	Quit $ListToString($ListBuild(pDir, pName _ "." _ pExt),pDirectorySeparator)
]]></Implementation>
</Method>
</Class>


<Class name="cosFaker.Finance">
<Super>cosFaker.lib.core</Super>
<TimeChanged>64364,54928.776548</TimeChanged>
<TimeCreated>64315,30624.365455</TimeCreated>

<Method name="Amount">
<ClassMethod>1</ClassMethod>
<FormalSpec>pMin:%Integer=0,pMax:%Integer=10000,pDec:%Integer=2,pSeparator=",",pSymbol:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set value = pMin-10, dec = ""
	While ('..In(value, pMin, pMax)) {
		Set value = $Random(pMax + 1)
	}
	
	For k=1:1:pDec {
		Set dec = dec _ $Random(10)
	}
	
	Quit pSymbol _ value _ pSeparator _ dec
]]></Implementation>
</Method>

<Method name="CreditCard">
<ClassMethod>1</ClassMethod>
<FormalSpec>pType:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set templates = ##class(%ArrayOfDataTypes).%New(),
		types = $ListBuild("visa", "mastercard", "american_express")
		
	Set:pType="" pType = ..Sample(types)
	
	Do templates.SetAt($ListBuild("4###########","4###-####-####-###"),"visa")
	Do templates.SetAt($ListBuild("5053-####-####-###","6771-89##-####-###"),"mastercard")
	Do templates.SetAt($ListBuild("34##-######-####"),"american_express")

	Quit ..MaskNumber(..Sample(templates.GetAt(pType)))
]]></Implementation>
</Method>

<Method name="BitcoinAddress">
<ClassMethod>1</ClassMethod>
<FormalSpec>pMin:%Integer=24,pMax:%Integer=34</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set:pMin<24 pMin = 24
	Set:pMax>34 pMax = 34
	Set length = "", bitcoinAddress = "", 
		digits58 = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
	
	While ('..In(length, pMin, pMax)) {
		Set length = $Random(36)
	}
	
	For k=1:1:27{
		Set i = $Random($Length(digits58)) + 1
		Set bitcoinAddress = bitcoinAddress _ $Extract(digits58,i)
	}

	Quit 1 _ bitcoinAddress
]]></Implementation>
</Method>
</Class>


<Class name="cosFaker.Internet">
<Super>%RegisteredObject</Super>
<TimeChanged>64364,38676.137262</TimeChanged>
<TimeCreated>64015,57627.232261</TimeCreated>

<Method name="UserName">
<ClassMethod>1</ClassMethod>
<FormalSpec>pFirstName:%String="",pLastName:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set rand = $Random(3)
	Set separator(0) = ".", separator(1) = "_"
	Set:pFirstName="" pFirstName = ##class(cosFaker.Name).FirstName()
	Set:pLastName="" pLastName = ##class(cosFaker.Name).LastName()
	
	If rand = 0 {
		Set username = pFirstName _ $Random(99)
	} ElseIf rand = 1 {
		Set username = pFirstName _ $Get(separator($Random(3))) _ pLastName
	} Else {
		Set username = pFirstName _ $Get(separator($Random(3))) _ pLastName _ $Random(99)
	}
	
	Quit ..Clean(username)
]]></Implementation>
</Method>

<Method name="Email">
<ClassMethod>1</ClassMethod>
<FormalSpec>pFirstName:%String="",pLastName:%String="",pProvider:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set:pProvider="" pProvider = ##class(cosFaker.Data.PtBr).EmailProvider()
	Quit ..UserName(pFirstName, pLastName) _ "@" _ pProvider
]]></Implementation>
</Method>

<Method name="Protocol">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set protocols(0) = "http"
	Set protocols(1) = "https"
	Quit $Get(protocols($Random(2)))
]]></Implementation>
</Method>

<Method name="DomainWord">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set output = ##class(cosFaker.Name).FirstName()
	Set m=##class(%Regex.Matcher).%New("([\\~#&*{}/:<>?|\""'])")
    Set m.Text = output
    While m.Locate() {
	    Set output = $Replace(output, m.Group, "")
    }
	Quit ..Clean(output)
]]></Implementation>
</Method>

<Method name="DomainName">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $ZConvert(..DomainWord(),"l") _ "." _ ##class(cosFaker.Data.PtBr).DomainSuffix()
]]></Implementation>
</Method>

<Method name="Url">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set www(0) = "www."
	Quit ..Protocol() _ "://" _ $Get(www($Random(2))) _ ..DomainName()
]]></Implementation>
</Method>

<Method name="Clean">
<ClassMethod>1</ClassMethod>
<FormalSpec>pName:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $ZConvert($Translate(pName,"úóéíá","uoeia"),"l")
]]></Implementation>
</Method>

<Method name="Avatar">
<ClassMethod>1</ClassMethod>
<FormalSpec>pSize:%Integer=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set:pSize="" pSize = 150
	Quit "http://www.avatarpro.biz/avatar?s="_pSize
]]></Implementation>
</Method>

<Method name="Slug">
<ClassMethod>1</ClassMethod>
<FormalSpec>pWords:%String="",pGlue:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set:pGlue="" pGlue = $List($ListBuild("-","_","."),($Random(3)+1))
	Set:pWords="" pWords = ##class(cosFaker.Lorem).Words(), 
		pWords = $Replace(pWords," ",pGlue)
	Quit pWords
]]></Implementation>
</Method>

<Method name="Initializer">
<Private>1</Private>
</Method>

<Method name="%OnNew">
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Do ..Initializer()
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="cosFaker.Job">
<Super>cosFaker.lib.core</Super>
<TimeChanged>64365,53680.722712</TimeChanged>
<TimeCreated>64365,52785.076161</TimeCreated>

<Method name="Title">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set title = $Random(3),
		seniority = ..Sample($ListFromString("Lead,Senior,Product,National,Regional,District,Central,Global,Customer,Investor,Dynamic,International,Legacy,Forward,Internal,Chief",",")),
		position = ..Sample($ListFromString("Supervisor,Associate,Executive,Liaison,Officer,Manager,Engineer,Specialist,Director,Coordinator,Administrator,Architect,Analyst,Designer,Planner,Orchestrator,Technician,Developer,Producer,Consultant,Assistant,Facilitator,Agent,Representative,Strategist",","))

	Quit:title=0 seniority_" "_..Field()_" "_position
	Quit:title=1 seniority_" "_position
	Quit:title=2 ..Field()_" "_position
]]></Implementation>
</Method>

<Method name="Field">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	Quit ..Sample($ListFromString("Marketing,IT,Accounting,Administration,Advertising,Banking,Community-Services,Construction,Consulting,Design,Education,Farming,Government,Healthcare,Hospitality,Legal,Manufacturing,Marketing,Mining,Real-Estate,Retail,Sales,Technology",","))
]]></Implementation>
</Method>

<Method name="Skills">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	Quit ..Sample($ListFromString("Teamwork,Communication,Problem solving,Leadership,Organisation,Work under pressure,Confidence,Self-motivated,Networking skills,Proactive,Fast learner,Technical savvy",","))
]]></Implementation>
</Method>
</Class>


<Class name="cosFaker.Lorem">
<Super>%RegisteredObject</Super>
<TimeChanged>64016,49520.739208</TimeChanged>
<TimeCreated>64015,32148.367654</TimeCreated>

<Method name="Word">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Q ..LoremIpsum()
]]></Implementation>
</Method>

<Method name="Words">
<ClassMethod>1</ClassMethod>
<FormalSpec>pNum:%Integer=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set:pNum="" pNum = 3
	For k=1:1:pNum {
		Set $List(words,*+1) = ..Word()
	}
	Quit $ListToString(words, " ")
]]></Implementation>
</Method>

<Method name="Sentence">
<ClassMethod>1</ClassMethod>
<FormalSpec>pWordCount:%Integer="",pMin:%Integer=3,pMax:%Integer=10</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If pWordCount = "" {
		For {
			Set pWordCount = $Random(10)
			Quit:((pWordCount>pMin)&&(pWordCount < pMax))
		}
	}
	
	Set sentence = ..Words(pWordCount)
	Quit $ZConvert($Extract(sentence,1,1), "U") _ $Extract(sentence,2,*) _ "."
]]></Implementation>
</Method>

<Method name="Sentences">
<ClassMethod>1</ClassMethod>
<FormalSpec>pSentenceCount:%Integer="",pSeparator:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If pSentenceCount = "" {
		For {
			Set pSentenceCount = $Random(6)
			Quit:pSentenceCount>2
		}
	}
	
	Set:pSeparator="" pSeparator = " "
	
	For k=1:1:pSentenceCount {
		Set $List(sentences,*+1) = ..Sentence()
	}

	Quit $ListToString($Get(sentences), pSeparator)
]]></Implementation>
</Method>

<Method name="Paragraph">
<ClassMethod>1</ClassMethod>
<FormalSpec>pSentenceCount:%Integer=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set:pSentenceCount="" pSentenceCount = 3
	Quit ..Sentences(pSentenceCount + $Random(3))
]]></Implementation>
</Method>

<Method name="Paragraphs">
<ClassMethod>1</ClassMethod>
<FormalSpec>pParagraphCount:%Integer="",pSeparator:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set:pParagraphCount="" pParagraphCount = 3
	Set:pSeparator="" pSeparator = $Char(10) _ $Char(13) ; \n \r OR LF CR
	
	For k=1:1:pParagraphCount {
		Set $List(paragraphs,*+1) = ..Paragraph()
	}
	
	Quit $ListToString($Get(paragraphs), pSeparator)
]]></Implementation>
</Method>

<Method name="Lines">
<ClassMethod>1</ClassMethod>
<FormalSpec>pLineCount:%Integer=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If pLineCount = "" {
		For {
			Set pLineCount = $Random(5)
			Quit:pLineCount>1
		}
	}
	
	Quit ..Sentences(pLineCount, $Char(10))
]]></Implementation>
</Method>

<Method name="Text">
<ClassMethod>1</ClassMethod>
<FormalSpec>pTimes:%Integer=1</FormalSpec>
<Implementation><![CDATA[
	Set output = ""
	For k=1:1:pTimes {
		Set rand = $Random(7)

		If rand = 1 { Set output = output _ ..Word() }
		ElseIf rand = 2 { Set output = output _ ..Words() }
		ElseIf rand = 3 { Set output = output _ ..Sentence() }
		ElseIf rand = 4 { Set output = output _ ..Sentences() }
		ElseIf rand = 5 { Set output = output _ ..Paragraph() }
		ElseIf rand = 6 { Set output = output _ ..Paragraphs() }
		ElseIf rand = 7 { Set output = output _ ..Lines() }
		
	}
	
	Quit output
]]></Implementation>
</Method>

<Method name="LoremIpsum">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set $List(lorem, *+1) = "alias"
    Set $List(lorem, *+1) = "consequatur"
    Set $List(lorem, *+1) = "aut"
    Set $List(lorem, *+1) = "perferendis"
    Set $List(lorem, *+1) = "sit"
    Set $List(lorem, *+1) = "voluptatem"
    Set $List(lorem, *+1) = "accusantium"
    Set $List(lorem, *+1) = "doloremque"
    Set $List(lorem, *+1) = "aperiam"
    Set $List(lorem, *+1) = "eaque"
    Set $List(lorem, *+1) = "ipsa"
    Set $List(lorem, *+1) = "quae"
    Set $List(lorem, *+1) = "ab"
    Set $List(lorem, *+1) = "illo"
    Set $List(lorem, *+1) = "inventore"
    Set $List(lorem, *+1) = "veritatis"
    Set $List(lorem, *+1) = "et"
    Set $List(lorem, *+1) = "quasi"
    Set $List(lorem, *+1) = "architecto"
    Set $List(lorem, *+1) = "beatae"
    Set $List(lorem, *+1) = "vitae"
    Set $List(lorem, *+1) = "dicta"
    Set $List(lorem, *+1) = "sunt"
    Set $List(lorem, *+1) = "explicabo"
    Set $List(lorem, *+1) = "aspernatur"
    Set $List(lorem, *+1) = "aut"
    Set $List(lorem, *+1) = "odit"
    Set $List(lorem, *+1) = "aut"
    Set $List(lorem, *+1) = "fugit"
    Set $List(lorem, *+1) = "sed"
    Set $List(lorem, *+1) = "quia"
    Set $List(lorem, *+1) = "consequuntur"
    Set $List(lorem, *+1) = "magni"
    Set $List(lorem, *+1) = "dolores"
    Set $List(lorem, *+1) = "eos"
    Set $List(lorem, *+1) = "qui"
    Set $List(lorem, *+1) = "ratione"
    Set $List(lorem, *+1) = "voluptatem"
    Set $List(lorem, *+1) = "sequi"
    Set $List(lorem, *+1) = "nesciunt"
    Set $List(lorem, *+1) = "neque"
    Set $List(lorem, *+1) = "dolorem"
    Set $List(lorem, *+1) = "ipsum"
    Set $List(lorem, *+1) = "quia"
    Set $List(lorem, *+1) = "dolor"
    Set $List(lorem, *+1) = "sit"
    Set $List(lorem, *+1) = "amet"
    Set $List(lorem, *+1) = "consectetur"
    Set $List(lorem, *+1) = "adipisci"
    Set $List(lorem, *+1) = "velit"
    Set $List(lorem, *+1) = "sed"
    Set $List(lorem, *+1) = "quia"
    Set $List(lorem, *+1) = "non"
    Set $List(lorem, *+1) = "numquam"
    Set $List(lorem, *+1) = "eius"
    Set $List(lorem, *+1) = "modi"
    Set $List(lorem, *+1) = "tempora"
    Set $List(lorem, *+1) = "incidunt"
    Set $List(lorem, *+1) = "ut"
    Set $List(lorem, *+1) = "labore"
    Set $List(lorem, *+1) = "et"
    Set $List(lorem, *+1) = "dolore"
    Set $List(lorem, *+1) = "magnam"
    Set $List(lorem, *+1) = "aliquam"
    Set $List(lorem, *+1) = "quaerat"
    Set $List(lorem, *+1) = "voluptatem"
    Set $List(lorem, *+1) = "ut"
    Set $List(lorem, *+1) = "enim"
    Set $List(lorem, *+1) = "ad"
    Set $List(lorem, *+1) = "minima"
    Set $List(lorem, *+1) = "veniam"
    Set $List(lorem, *+1) = "quis"
    Set $List(lorem, *+1) = "nostrum"
    Set $List(lorem, *+1) = "exercitationem"
    Set $List(lorem, *+1) = "ullam"
    Set $List(lorem, *+1) = "corporis"
    Set $List(lorem, *+1) = "nemo"
    Set $List(lorem, *+1) = "enim"
    Set $List(lorem, *+1) = "ipsam"
    Set $List(lorem, *+1) = "voluptatem"
    Set $List(lorem, *+1) = "quia"
    Set $List(lorem, *+1) = "voluptas"
    Set $List(lorem, *+1) = "sit"
    Set $List(lorem, *+1) = "suscipit"
    Set $List(lorem, *+1) = "laboriosam"
    Set $List(lorem, *+1) = "nisi"
    Set $List(lorem, *+1) = "ut"
    Set $List(lorem, *+1) = "aliquid"
    Set $List(lorem, *+1) = "ex"
    Set $List(lorem, *+1) = "ea"
    Set $List(lorem, *+1) = "commodi"
    Set $List(lorem, *+1) = "consequatur"
    Set $List(lorem, *+1) = "quis"
    Set $List(lorem, *+1) = "autem"
    Set $List(lorem, *+1) = "vel"
    Set $List(lorem, *+1) = "eum"
    Set $List(lorem, *+1) = "iure"
    Set $List(lorem, *+1) = "reprehenderit"
    Set $List(lorem, *+1) = "qui"
    Set $List(lorem, *+1) = "in"
    Set $List(lorem, *+1) = "ea"
    Set $List(lorem, *+1) = "voluptate"
    Set $List(lorem, *+1) = "velit"
    Set $List(lorem, *+1) = "esse"
    Set $List(lorem, *+1) = "quam"
    Set $List(lorem, *+1) = "nihil"
    Set $List(lorem, *+1) = "molestiae"
    Set $List(lorem, *+1) = "et"
    Set $List(lorem, *+1) = "iusto"
    Set $List(lorem, *+1) = "odio"
    Set $List(lorem, *+1) = "dignissimos"
    Set $List(lorem, *+1) = "ducimus"
    Set $List(lorem, *+1) = "qui"
    Set $List(lorem, *+1) = "blanditiis"
    Set $List(lorem, *+1) = "praesentium"
    Set $List(lorem, *+1) = "laudantium"
    Set $List(lorem, *+1) = "totam"
    Set $List(lorem, *+1) = "rem"
    Set $List(lorem, *+1) = "voluptatum"
    Set $List(lorem, *+1) = "deleniti"
    Set $List(lorem, *+1) = "atque"
    Set $List(lorem, *+1) = "corrupti"
    Set $List(lorem, *+1) = "quos"
    Set $List(lorem, *+1) = "dolores"
    Set $List(lorem, *+1) = "et"
    Set $List(lorem, *+1) = "quas"
    Set $List(lorem, *+1) = "molestias"
    Set $List(lorem, *+1) = "excepturi"
    Set $List(lorem, *+1) = "sint"
    Set $List(lorem, *+1) = "occaecati"
    Set $List(lorem, *+1) = "cupiditate"
    Set $List(lorem, *+1) = "non"
    Set $List(lorem, *+1) = "provident"
    Set $List(lorem, *+1) = "sed"
    Set $List(lorem, *+1) = "ut"
    Set $List(lorem, *+1) = "perspiciatis"
    Set $List(lorem, *+1) = "unde"
    Set $List(lorem, *+1) = "omnis"
    Set $List(lorem, *+1) = "iste"
    Set $List(lorem, *+1) = "natus"
    Set $List(lorem, *+1) = "error"
    Set $List(lorem, *+1) = "similique"
    Set $List(lorem, *+1) = "sunt"
    Set $List(lorem, *+1) = "in"
    Set $List(lorem, *+1) = "culpa"
    Set $List(lorem, *+1) = "qui"
    Set $List(lorem, *+1) = "officia"
    Set $List(lorem, *+1) = "deserunt"
    Set $List(lorem, *+1) = "mollitia"
    Set $List(lorem, *+1) = "animi"
    Set $List(lorem, *+1) = "id"
    Set $List(lorem, *+1) = "est"
    Set $List(lorem, *+1) = "laborum"
    Set $List(lorem, *+1) = "et"
    Set $List(lorem, *+1) = "dolorum"
    Set $List(lorem, *+1) = "fuga"
    Set $List(lorem, *+1) = "et"
    Set $List(lorem, *+1) = "harum"
    Set $List(lorem, *+1) = "quidem"
    Set $List(lorem, *+1) = "rerum"
    Set $List(lorem, *+1) = "facilis"
    Set $List(lorem, *+1) = "est"
    Set $List(lorem, *+1) = "et"
    Set $List(lorem, *+1) = "expedita"
    Set $List(lorem, *+1) = "distinctio"
    Set $List(lorem, *+1) = "nam"
    Set $List(lorem, *+1) = "libero"
    Set $List(lorem, *+1) = "tempore"
    Set $List(lorem, *+1) = "cum"
    Set $List(lorem, *+1) = "soluta"
    Set $List(lorem, *+1) = "nobis"
    Set $List(lorem, *+1) = "est"
    Set $List(lorem, *+1) = "eligendi"
    Set $List(lorem, *+1) = "optio"
    Set $List(lorem, *+1) = "cumque"
    Set $List(lorem, *+1) = "nihil"
    Set $List(lorem, *+1) = "impedit"
    Set $List(lorem, *+1) = "quo"
    Set $List(lorem, *+1) = "porro"
    Set $List(lorem, *+1) = "quisquam"
    Set $List(lorem, *+1) = "est"
    Set $List(lorem, *+1) = "qui"
    Set $List(lorem, *+1) = "minus"
    Set $List(lorem, *+1) = "id"
    Set $List(lorem, *+1) = "quod"
    Set $List(lorem, *+1) = "maxime"
    Set $List(lorem, *+1) = "placeat"
    Set $List(lorem, *+1) = "facere"
    Set $List(lorem, *+1) = "possimus"
    Set $List(lorem, *+1) = "omnis"
    Set $List(lorem, *+1) = "voluptas"
    Set $List(lorem, *+1) = "assumenda"
    Set $List(lorem, *+1) = "est"
    Set $List(lorem, *+1) = "omnis"
    Set $List(lorem, *+1) = "dolor"
    Set $List(lorem, *+1) = "repellendus"
    Set $List(lorem, *+1) = "temporibus"
    Set $List(lorem, *+1) = "autem"
    Set $List(lorem, *+1) = "quibusdam"
    Set $List(lorem, *+1) = "et"
    Set $List(lorem, *+1) = "aut"
    Set $List(lorem, *+1) = "consequatur"
    Set $List(lorem, *+1) = "vel"
    Set $List(lorem, *+1) = "illum"
    Set $List(lorem, *+1) = "qui"
    Set $List(lorem, *+1) = "dolorem"
    Set $List(lorem, *+1) = "eum"
    Set $List(lorem, *+1) = "fugiat"
    Set $List(lorem, *+1) = "quo"
    Set $List(lorem, *+1) = "voluptas"
    Set $List(lorem, *+1) = "nulla"
    Set $List(lorem, *+1) = "pariatur"
    Set $List(lorem, *+1) = "at"
    Set $List(lorem, *+1) = "vero"
    Set $List(lorem, *+1) = "eos"
    Set $List(lorem, *+1) = "et"
    Set $List(lorem, *+1) = "accusamus"
    Set $List(lorem, *+1) = "officiis"
    Set $List(lorem, *+1) = "debitis"
    Set $List(lorem, *+1) = "aut"
    Set $List(lorem, *+1) = "rerum"
    Set $List(lorem, *+1) = "necessitatibus"
    Set $List(lorem, *+1) = "saepe"
    Set $List(lorem, *+1) = "eveniet"
    Set $List(lorem, *+1) = "ut"
    Set $List(lorem, *+1) = "et"
    Set $List(lorem, *+1) = "voluptates"
    Set $List(lorem, *+1) = "repudiandae"
    Set $List(lorem, *+1) = "sint"
    Set $List(lorem, *+1) = "et"
    Set $List(lorem, *+1) = "molestiae"
    Set $List(lorem, *+1) = "non"
    Set $List(lorem, *+1) = "recusandae"
    Set $List(lorem, *+1) = "itaque"
    Set $List(lorem, *+1) = "earum"
    Set $List(lorem, *+1) = "rerum"
    Set $List(lorem, *+1) = "hic"
    Set $List(lorem, *+1) = "tenetur"
    Set $List(lorem, *+1) = "a"
    Set $List(lorem, *+1) = "sapiente"
    Set $List(lorem, *+1) = "delectus"
    Set $List(lorem, *+1) = "ut"
    Set $List(lorem, *+1) = "aut"
    Set $List(lorem, *+1) = "reiciendis"
    Set $List(lorem, *+1) = "voluptatibus"
    Set $List(lorem, *+1) = "maiores"
    Set $List(lorem, *+1) = "doloribus"
    Set $List(lorem, *+1) = "asperiores"
    Set $List(lorem, *+1) = "repellat"
    
    Set output = $ListGet(lorem,$Random($ListLength(lorem)) + 1)
	Kill lorem
	Quit output
]]></Implementation>
</Method>

<Method name="Hipster">
<ClassMethod>1</ClassMethod>
<FormalSpec>pParagraphCount:%Integer="",pSeparator:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set:pParagraphCount="" pParagraphCount = 3
	Set:pSeparator="" pSeparator = $Char(10) _ $Char(13) ; \n \r OR LF CR
	
	Set $List(begin, *+1) = "Caros amigos, "
    Set $List(begin, *+1) = "Por outro lado, "
    Set $List(begin, *+1) = "Assim mesmo, "
    Set $List(begin, *+1) = "No entanto, não podemos esquecer que "
    Set $List(begin, *+1) = "Do mesmo modo, "
    Set $List(begin, *+1) = "A prática cotidiana prova que "
    Set $List(begin, *+1) = "Nunca é demais lembrar o peso e o significado destes problemas, uma vez que "
    Set $List(begin, *+1) = "As experiências acumuladas demonstram que "
    Set $List(begin, *+1) = "Acima de tudo, é fundamental ressaltar que "
    Set $List(begin, *+1) = "O incentivo ao avanço tecnológico, assim como "
    Set $List(begin, *+1) = "Não obstante, "
    Set $List(begin, *+1) = "Todas estas questões, devidamente ponderadas, levantam dúvidas sobre se "
    Set $List(begin, *+1) = "Pensando mais a longo prazo, "
    Set $List(begin, *+1) = "O que temos que ter sempre em mente é que "
    Set $List(begin, *+1) = "Ainda assim, existem dúvidas a respeito de como "
    Set $List(begin, *+1) = "Gostaria de enfatizar que "
    Set $List(begin, *+1) = "Todavia, "
    Set $List(begin, *+1) = "A nível organizacional, "
    Set $List(begin, *+1) = "O empenho em analisar "
    Set $List(begin, *+1) = "Percebemos, cada vez mais, que "
    Set $List(begin, *+1) = "No mundo atual, "
    Set $List(begin, *+1) = "É importante questionar o quanto "
    Set $List(begin, *+1) = "Neste sentido, "
    Set $List(begin, *+1) = "Evidentemente, "
    Set $List(begin, *+1) = "Por conseguinte, "
    Set $List(begin, *+1) = "É claro que "
    Set $List(begin, *+1) = "Podemos já vislumbrar o modo pelo qual "
    Set $List(begin, *+1) = "Desta maneira, "
    Set $List(begin, *+1) = "O cuidado em identificar pontos críticos n"
    Set $List(begin, *+1) = "A certificação de metodologias que nos auxiliam a lidar com "
    
    Set $List(middle, *+1) = "a execução dos pontos do programa "
    Set $List(middle, *+1) = "a complexidade dos estudos efetuados "
    Set $List(middle, *+1) = "a contínua expansão de nossa atividade "
    Set $List(middle, *+1) = "a estrutura atual da organização "
    Set $List(middle, *+1) = "o novo modelo estrutural aqui preconizado "
    Set $List(middle, *+1) = "o desenvolvimento contínuo de distintas formas de atuação "
    Set $List(middle, *+1) = "a constante divulgação das informações "
    Set $List(middle, *+1) = "a consolidação das estruturas "
    Set $List(middle, *+1) = "a consulta aos diversos militantes "
    Set $List(middle, *+1) = "o início da atividade geral de formação de atitudes "
    Set $List(middle, *+1) = "o desafiador cenário globalizado "
    Set $List(middle, *+1) = "a mobilidade dos capitais internacionais "
    Set $List(middle, *+1) = "o fenômeno da Internet "
    Set $List(middle, *+1) = "a hegemonia do ambiente político "
    Set $List(middle, *+1) = "a expansão dos mercados mundiais "
    Set $List(middle, *+1) = "o aumento do diálogo entre os diferentes setores produtivos "
    Set $List(middle, *+1) = "a crescente influência da mídia "
    Set $List(middle, *+1) = "a necessidade de renovação processual "
    Set $List(middle, *+1) = "a competitividade nas transações comerciais "
    Set $List(middle, *+1) = "o surgimento do comércio virtual "
    Set $List(middle, *+1) = "a revolução dos costumes "
    Set $List(middle, *+1) = "o acompanhamento das preferências de consumo "
    Set $List(middle, *+1) = "o comprometimento entre as equipes "
    Set $List(middle, *+1) = "a determinação clara de objetivos "
    Set $List(middle, *+1) = "a adoção de políticas descentralizadoras "
    Set $List(middle, *+1) = "a valorização de fatores subjetivos "
    Set $List(middle, *+1) = "a percepção das dificuldades "
    Set $List(middle, *+1) = "o entendimento das metas propostas "
    Set $List(middle, *+1) = "o consenso sobre a necessidade de qualificação "
    Set $List(middle, *+1) = "o julgamento imparcial das eventualidades "

    Set $List(middle2, *+1) = "nos obriga à análise "
    Set $List(middle2, *+1) = "cumpre um papel essencial na formulação "
    Set $List(middle2, *+1) = "exige a precisão e a definição "
    Set $List(middle2, *+1) = "auxilia a preparação e a composição "
    Set $List(middle2, *+1) = "garante a contribuição de um grupo importante na determinação "
    Set $List(middle2, *+1) = "assume importantes posições no estabelecimento "
    Set $List(middle2, *+1) = "facilita a criação "
    Set $List(middle2, *+1) = "obstaculiza a apreciação da importância "
    Set $List(middle2, *+1) = "oferece uma interessante oportunidade para verificação "
    Set $List(middle2, *+1) = "acarreta um processo de reformulação e modernização "
    Set $List(middle2, *+1) = "pode nos levar a considerar a reestruturação "
    Set $List(middle2, *+1) = "representa uma abertura para a melhoria "
    Set $List(middle2, *+1) = "ainda não demonstrou convincentemente que vai participar na mudança "
    Set $List(middle2, *+1) = "talvez venha a ressaltar a relatividade "
    Set $List(middle2, *+1) = "prepara-nos para enfrentar situações atípicas decorrentes "
    Set $List(middle2, *+1) = "maximiza as possibilidades por conta "
    Set $List(middle2, *+1) = "desafia a capacidade de equalização "
    Set $List(middle2, *+1) = "agrega valor ao estabelecimento "
    Set $List(middle2, *+1) = "é uma das consequências "
    Set $List(middle2, *+1) = "promove a alavancagem "
    Set $List(middle2, *+1) = "não pode mais se dissociar "
    Set $List(middle2, *+1) = "possibilita uma melhor visão global "
    Set $List(middle2, *+1) = "estimula a padronização "
    Set $List(middle2, *+1) = "aponta para a melhoria "
    Set $List(middle2, *+1) = "faz parte de um processo de gerenciamento "
    Set $List(middle2, *+1) = "causa impacto indireto na reavaliação "
    Set $List(middle2, *+1) = "apresenta tendências no sentido de aprovar a manutenção "
    Set $List(middle2, *+1) = "estende o alcance e a importância "
    Set $List(middle2, *+1) = "deve passar por modificações independentemente "
    Set $List(middle2, *+1) = "afeta positivamente a correta previsão "
    
    Set $List( TheEnd, *+1) = "das condições financeiras e administrativas exigidas."
    Set $List( TheEnd, *+1) = "das diretrizes de desenvolvimento para o futuro."
    Set $List( TheEnd, *+1) = "do sistema de participação geral."
    Set $List( TheEnd, *+1) = "das posturas dos órgãos dirigentes com relação às suas atribuições."
    Set $List( TheEnd, *+1) = "das novas proposições."
    Set $List( TheEnd, *+1) = "das direções preferenciais no sentido do progresso."
    Set $List( TheEnd, *+1) = "do sistema de formação de quadros que corresponde às necessidades."
    Set $List( TheEnd, *+1) = "das condições inegavelmente apropriadas."
    Set $List( TheEnd, *+1) = "dos índices pretendidos."
    Set $List( TheEnd, *+1) = "das formas de ação."
    Set $List( TheEnd, *+1) = "dos paradigmas corporativos."
    Set $List( TheEnd, *+1) = "dos relacionamentos verticais entre as hierarquias."
    Set $List( TheEnd, *+1) = "do processo de comunicação como um todo."
    Set $List( TheEnd, *+1) = "dos métodos utilizados na avaliação de resultados."
    Set $List( TheEnd, *+1) = "de todos os recursos funcionais envolvidos."
    Set $List( TheEnd, *+1) = "dos níveis de motivação departamental."
    Set $List( TheEnd, *+1) = "da gestão inovadora da qual fazemos parte."
    Set $List( TheEnd, *+1) = "dos modos de operação convencionais."
    Set $List( TheEnd, *+1) = "de alternativas às soluções ortodoxas."
    Set $List( TheEnd, *+1) = "dos procedimentos normalmente adotados."
    Set $List( TheEnd, *+1) = "dos conhecimentos estratégicos para atingir a excelência."
    Set $List( TheEnd, *+1) = "do fluxo de informações."
    Set $List( TheEnd, *+1) = "do levantamento das variáveis envolvidas."
    Set $List( TheEnd, *+1) = "das diversas correntes de pensamento."
    Set $List( TheEnd, *+1) = "do impacto na agilidade decisória."
    Set $List( TheEnd, *+1) = "das regras de conduta normativas."
    Set $List( TheEnd, *+1) = "do orçamento setorial."
    Set $List( TheEnd, *+1) = "do retorno esperado a longo prazo."
    Set $List( TheEnd, *+1) = "do investimento em reciclagem técnica."
    Set $List( TheEnd, *+1) = "do remanejamento dos quadros funcionais."
    
	For k=1:1:pParagraphCount {
		S paragraph = $ListGet(begin,$Random($ListLength(begin)) + 1)
		S paragraph = paragraph _ $ListGet(middle,$Random($ListLength(middle)) + 1)
		S paragraph = paragraph _ $ListGet(middle2,$Random($ListLength(middle2)) + 1)
		S paragraph = paragraph _ $ListGet(TheEnd,$Random($ListLength(TheEnd)) + 1)
		Set $List(paragraphs,*+1) = paragraph
	}
	
	K begin, TheEnd, middle, middle2
	Quit $ListToString($Get(paragraphs), pSeparator)
]]></Implementation>
</Method>
</Class>


<Class name="cosFaker.Name">
<Super>%RegisteredObject</Super>
<TimeChanged>64357,40538.008011</TimeChanged>
<TimeCreated>64015,30897.267344</TimeCreated>

<Method name="FirstName">
<Description>
Generate a First Name
Female Gender = 1
Male Gender = 1</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pGender:%Integer=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set:pGender="" pGender = ($Random(2) + 1)
	
	Set name = ##class(cosFaker.Data.PtBr).FemaleFirstName()
	If pGender = 2 {
		Set name = ##class(cosFaker.Data.PtBr).MaleFirstName()
	} 
	
	Quit name
]]></Implementation>
</Method>

<Method name="LastName">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit ##class(cosFaker.Data.PtBr).LastName()
]]></Implementation>
</Method>

<Method name="FullName">
<ClassMethod>1</ClassMethod>
<FormalSpec>pGender:%Integer=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set:pGender="" pGender = ($Random(2) + 1)
	
	Set firstname = ##class(cosFaker.Data.PtBr).FemaleFirstName()
	If pGender = 2 {
		Set firstname = ##class(cosFaker.Data.PtBr).MaleFirstName()
	} 
	
	S rand = $R(3) + 1,lastname = ""
	F k=1:1:rand {
		S:k>1 lastname = lastname _ " "
		S lastname = lastname _ ##class(cosFaker.Data.PtBr).LastName()
	}
	
	Quit firstname _ " " _ lastname
]]></Implementation>
</Method>

<Method name="Suffix">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Q ##class(cosFaker.Data.PtBr).PersonSuffix()
]]></Implementation>
</Method>

<Method name="%OnNew">
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Do ..Initializer()
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Initializer">
<Private>1</Private>
</Method>
</Class>


<Class name="cosFaker.Person">
<TimeChanged>64357,40312.500187</TimeChanged>
<TimeCreated>64357,37742.989264</TimeCreated>

<Method name="cpf">
<ClassMethod>1</ClassMethod>
<FormalSpec>pPretty:%Boolean=1</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	For k=1:1:9 {
		Set $List(CpfRoot,*+1) = $Random(10)
	}
	
	Set sum = 0
	For k=1:1:$ListLength(CpfRoot) {
		Set sum = sum + ($List(CpfRoot, k) * (10 - (k-1)))
	}
	
	Set firstValidator = sum # 11
	If (firstValidator=10)||(firstValidator=11)||(firstValidator<2) {
		Set firstValidator = 0
	} Else {
		Set firstValidator = 11 - firstValidator
	}
	
	Set $List(CpfRoot, *+1) = firstValidator,
		sum = 0
		
	For k=1:1:$ListLength(CpfRoot) {
		Set sum = sum + ($List(CpfRoot, k) * (11 - (k-1)))
	}
	
	Set secondValidator = sum # 11
	If (secondValidator=10) || (secondValidator=11)|| (secondValidator<2) {
		Set secondValidator = 0
	} Else {
		Set secondValidator = 11 - secondValidator
	}
	
	Set $List(CpfRoot, *+1) = secondValidator,
		cpf = $ListToString(CpfRoot,"")
	
	Set:$Length(cpf)>11 cpf = ..cpf(pPretty)
	
	Set:pPretty=$$$YES cpf = $Extract(cpf,1,3)_"."_$Extract(cpf,4,6)_"."_$Extract(cpf,7,9)_"-"_$Extract(cpf,10,11)
	Quit cpf
]]></Implementation>
</Method>
</Class>


<Class name="cosFaker.Phone">
<Super>cosFaker.lib.core</Super>
<TimeChanged>64365,51971.969329</TimeChanged>
<TimeCreated>64365,51389.260201</TimeCreated>

<Method name="PhoneNumber">
<ClassMethod>1</ClassMethod>
<FormalSpec>pArea:%Boolean=1</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set area = ""
	Set:pArea area = "("_..AreaCode()_") "
	
	Quit area_..MaskNumber("####-####")
]]></Implementation>
</Method>

<Method name="CellPhone">
<ClassMethod>1</ClassMethod>
<FormalSpec>pArea:%Boolean=1</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set area = ""
	Set:pArea area = "("_..AreaCode()_") "
	
	Quit area_..MaskNumber("9####-####")
]]></Implementation>
</Method>

<Method name="AreaCode">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit ..MaskNumber("##",1,9)
]]></Implementation>
</Method>
</Class>


<Class name="cosFaker.StarWars">
<TimeChanged>64364,33751.232822</TimeChanged>
<TimeCreated>64364,31378.877658</TimeCreated>

<Method name="Characters">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set characters = $ListBuild("Padme Amidala", "Jar Jar Binks", "Borvo the Hutt", "Darth Caedus", "Boba Fett", "Jabba the Hutt", "Obi-Wan Kenobi", "Darth Maul", "Leia Organa", "Sheev Palpatine",
         "Kylo Ren", "Darth Sidious", "Anakin Skywalker", "Luke Skywalker", "Ben Solo", "Han Solo", "Darth Vader", "Watto", "Mace Windu", "Yoda", "Count Dooku", "Sebulba",
         "Qui-Gon Jinn", "Chewbacca", "Jango Fett", "Lando Calrissian", "Bail Organa", "Wedge Antilles", "Poe Dameron", "Ki-Adi-Mundi", "Nute Gunray", "Panaka", "Rune Haako")
    
    Quit ..Sample(characters)
]]></Implementation>
</Method>

<Method name="Droids">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set droids = $ListBuild("2-1B", "4-LOM", "ASP", "B2-RP", "B1", "BD-3000", "FA-4", "GH-7", "GNK", "LM-432", "ID9", "11-4D", "2-1B", "327-T", "4-LOM", "B4-D4",
         "NR-N99", "C-3PO", "R2-D2", "BB-8", "R2-Q5")
    
    Quit ..Sample(droids)
]]></Implementation>
</Method>

<Method name="Planets">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set planets = $ListBuild("Alderaan", "Bespin", "Coruscant", "DQar", "Dagobah", "Endor", "Geonosis", "Hoth",
          "Hosnian Prime",  "Jakku", "Kamino", "Kashyyyk", "Lothal", "Mustafar", "Naboo",
          "Sullust", "Takodana", "Tatooine", "Utapau", "Yavin")
    
    Quit ..Sample(planets)
]]></Implementation>
</Method>

<Method name="Quotes">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set quotes = $ListBuild("Never tell me the odds!", "Well, you said you wanted to be around when I made a mistake.", "You will never find a more wretched hive of scum and villainy. We must be cautious.", "Wars not make one great.",
         "You do have your moments. Not many, but you have them.", "Now, witness the power of this fully operational battle station.", "No reward is worth this.", "Shut him up or shut him down.",
         "I have a bad feeling about this.", "Who's the more foolish; the fool, or the fool who follows him?", "Would somebody get this big walking carpet out of my way?", "I find your lack of faith disturbing.",
         "If they follow standard Imperial procedure, they'll dump their garbage before they go to light-speed.", "Only at the end do you realize the power of the Dark Side.", "Bounty hunters! We don't need this scum.",
         "It's not impossible. I used to bullseye womp rats in my T-16 back home, they're not much bigger than two meters.", "Strike me down, and I will become more powerful than you could possibly imagine.",
         "You know, that little droid is going to cause me a lot of trouble.", "If you're saying that coming here was a bad idea, I'm starting to agree with you.", "You'll find I'm full of surprises!",
         "Aren't you a little short for a Stormtrooper?", "You are unwise to lower your defenses!", "R2-D2, you know better than to trust a strange computer!", "Truly wonderful, the mind of a child is.",
         "That is why you fail.", "A Jedi uses the Force for knowledge and defense, never for attack.", "Adventure. Excitement. A Jedi craves not these things.", "Judge me by my size, do you?",
         "Fear is the path to the dark side... fear leads to anger... anger leads to hate... hate leads to suffering.", "Do. Or do not. There is no try.")
    
    Quit ..Sample(quotes)
]]></Implementation>
</Method>

<Method name="Species">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set species = $ListBuild("Ewok", "Hutt", "Gungan", "Ithorian", "Jawa", "Neimoidian", "Sullustan", "Wookiee", "Mon Calamari")
    
    Quit ..Sample(species)
]]></Implementation>
</Method>

<Method name="Vehicles">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set vehicles = $ListBuild("V-Wing Fighter", "ATT Battle Tank", "Naboo N-1 Starfighter", "Vulture Droid", "Republic Cruiser", "Naboo Royal Starship", "Gungan Bongo Submarine", "Flash Speeder", "Trade Federation Battleship", "Millennium Falcon",
         "Sith Infiltrator", "AT-ST Walker", "TIE Bomber", "Imperial Shuttle", "Sandcrawler", "TIE Interceptor", "Speeder Bike", "Death Star", "AT-AT Walker", "Imperial Star Destroyer", "X-Wing Fighter")
    
    Quit ..Sample(vehicles)
]]></Implementation>
</Method>

<Method name="WookieWords">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set words = $ListBuild("wyaaaaaa", "ruh", "huewaa", "muaa", "mumwa", "wua", "ga", "ma", "ahuma", "ooma", "youw", "kabukk", "wyogg",
          "gwyaaaag", "roooarrgh", "ur", "ru", "roo", "hnn-rowr", "yrroonn", "nng", "rarr")
    
    Quit ..Sample(words)
]]></Implementation>
</Method>

<Method name="Sample">
<ClassMethod>1</ClassMethod>
<FormalSpec>pList</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $List(pList, $Random($ListLength(pList)) + 1)
]]></Implementation>
</Method>

<Method name="WookieSentence">
<ClassMethod>1</ClassMethod>
<FormalSpec>pSentenceCount:%Integer=""</FormalSpec>
<Implementation><![CDATA[
	Set:pSentenceCount="" pSentenceCount = $Random(6)+1
	
	For k=1:1:pSentenceCount {
		Set sentence = "",
			punctuation = $Case(($Random(4) + 1),1:".",2:"?",3:"!",:" ")

		For k=1:1:($Random(15)+1) {
			Set $List(sentence, *+1) = ..WookieWords() 
		}
	
		Set $List(sentences,*+1) = $ListToString(sentence," ") _ punctuation
	}
	
	Quit $ListToString(sentences," ")
]]></Implementation>
</Method>
</Class>


<Class name="cosFaker.UFC">
<Super>cosFaker.lib.core</Super>
<TimeChanged>64376,33473.536327</TimeChanged>
<TimeCreated>64373,51516.328131</TimeCreated>

<Method name="Category">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit ..Sample($ListBuild("Heavyweight","Featherweight","Middleweight","Welterweight","Lightweight","Bantamweight","Flyweight","LightHeavyweight"))
]]></Implementation>
</Method>

<Method name="Fighter">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pCategory:%String="",&pCountry:%String="",pWithISOCountry:%Boolean=0]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set:pCategory="" pCategory = ..Category()
	
	Set:pCategory="Heavyweight" tFighter = ..Heavyweight(.pCountry)
	Set:pCategory="Featherweight" tFighter = ..Featherweight(.pCountry)
	Set:pCategory="Middleweight" tFighter = ..Middleweight(.pCountry)
	Set:pCategory="Welterweight" tFighter = ..Welterweight(.pCountry)
	Set:pCategory="Lightweight" tFighter = ..Lightweight(.pCountry)
	Set:pCategory="Bantamweight" tFighter = ..Bantamweight(.pCountry)
	Set:pCategory="Flyweight" tFighter = ..Flyweight(.pCountry)
	Set:pCategory="LightHeavyweight" tFighter =..LightHeavyweight(.pCountry)
	
	Set:pWithISOCountry tFighter = tFighter _ " [" _ pCountry _ "]"
	
	Quit tFighter
]]></Implementation>
</Method>

<Method name="Featherweight">
<Description>
(145 lb, 65 kg)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pCountry:%String=""]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set countries = $ListBuild("USA","BRA","KOR","RUS","CHL","PER","MEX","GER","JPN","ENG","GBR","CHN","IRE","FIN","BIH","NZL"), 
		fighters = ##class(%ArrayOfDataTypes).%New()
	
	Set:pCountry="" pCountry = ..Sample(countries)	
	
	Do fighters.SetAt($ListBuild("Clay Guida", "Jeremy Stephens", "BJ Penn", "Frankie Edgar", "Cub Swanson", "Gray Maynard", "Ricardo Lamas", "Chad Mendes", "Anthony Pettis", "Max Holloway", "Darren Elkins", "Alex Caceres", "Dennis Bermudez", "Sam Sicilia", "Myles Jury", "Chas Skelly", "Jimy Hettes", "Mike De La Torre", "Brian Ortega", "Jason Knight", "Charles Rosa", "Ryan Hall", "Chris Gruetzemacher", "Rick Glenn", "Kyle Bochniak", "Shane Burgos", "Jared Gordon"),"USA")
	Do fighters.SetAt($ListBuild("José Aldo", "Charles Oliveira", "Renan Barão", "Godofredo Pepey", "Rony Jason", "Hacran Dias", "Renato Moicano"),"BRA")
	Do fighters.SetAt($ListBuild("Jeremy Kennedy", "Gavin Tucker"),"CAN")
	Do fighters.SetAt($ListBuild("Chan Sung Jung", "Doo Ho Choi"),"KOR")
	Do fighters.SetAt($ListBuild("Zubaira Tukhugov", "Zabit Magomedsharipov"),"RUS")
	Do fighters.SetAt($ListBuild("Yair Rodriguez", "Gabriel Benitez"),"MEX")
	Do fighters.SetAt($ListBuild("Dennis Siver", "Martin Buschkamp"),"GER")
	Do fighters.SetAt($ListBuild("Mizuto Hirota", "Teruto Ishihara"),"JPN")
	Do fighters.SetAt($ListBuild("Ning Guangyou", "Guan Wang"),"CHN")
	Do fighters.SetAt($ListBuild("Alex Enlund"),"ENG")
	Do fighters.SetAt($ListBuild("Arnold Allen"),"GBR")
	Do fighters.SetAt($ListBuild("Diego Rivas"),"CHL")
	Do fighters.SetAt($ListBuild("Enrique Barzola"),"PER")
	Do fighters.SetAt($ListBuild("Artem Lobov"),"IRE")
	Do fighters.SetAt($ListBuild("Makwan Amirkhani"),"FIN")
	Do fighters.SetAt($ListBuild("Mirsad Bektic"),"BIH")
	Do fighters.SetAt($ListBuild("Dan Hooker"),"NZL")
	
	Quit ..Sample(fighters.GetAt(pCountry))
]]></Implementation>
</Method>

<Method name="Middleweight">
<Description>
(185 lb, 84 kg)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pCountry:%String=""]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set countries = $ListBuild("GBR", "USA", "BRA", "NED", "JAM", "AUS", "CUB", "POL", "CAN", "SWE", "ZAF", "NGR", "ITA", "WAL"),
		fighters = ##class(%ArrayOfDataTypes).%New()
	
	Set:pCountry="" pCountry = ..Sample(countries)	
	
 	Do fighters.SetAt($ListBuild("Michael Bisping", "Bradley Scott", "Scott Askham"),"GBR")
 	Do fighters.SetAt($ListBuild("Nate Marquardt", "Johny Hendricks", "Tim Boetsch", "Rashad Evans", "Chris Camozzi", "CB Dollaway", "Kelvin Gastelum", "Derek Brunson", "Brad Tavares", "Chris Weidman", "Trevor Smith", "Sam Alvey", "Anthony Smith", "David Branch", "Jake Collier", "Eric Spicely", "Alex Nicholson", "Gerald Meerschaert", "Andrew Sanchez", "Keith Berish", "Luke Rockhold"),"USA")
 	Do fighters.SetAt($ListBuild("Vitor Belfort", "Anderson Silva", "Lyoto Machida", "Thales Leites", "Rafael Natal", "Ronaldo Souza", "Cezar Ferreira", "Thiago Santos", "Antônio Carlos Júnior", "Vitor Miranda", "Marcelo Guimarães", "Paulo Henrique Costa"),"BRA")
 	Do fighters.SetAt($ListBuild("Gegard Mousasi"),"NED")
 	Do fighters.SetAt($ListBuild("Uriah Hall"),"JAM")
 	Do fighters.SetAt($ListBuild("Robert Whittaker", "Dan Kelly"),"AUS")
 	Do fighters.SetAt($ListBuild("Yoel Romero", "Hector Lombard"),"CUB")
 	Do fighters.SetAt($ListBuild("Krzysztof Jotko"),"POL")
 	Do fighters.SetAt($ListBuild("Elias Theodorou", "Ryan Janes"),"CAN")
 	Do fighters.SetAt($ListBuild("Magnus Cedenblad", "Jack Hermansson"),"SWE")
 	Do fighters.SetAt($ListBuild("Garreth McLellan"),"ZAF")
 	Do fighters.SetAt($ListBuild("Oluwale Bamgbose"),"NGR")
 	Do fighters.SetAt($ListBuild("Alessio Di Chirico", "Marvin Vettori"),"ITA")
 	Do fighters.SetAt($ListBuild("Jack Marshman"),"WAL")
 	
	Quit ..Sample(fighters.GetAt(pCountry))
]]></Implementation>
</Method>

<Method name="Welterweight">
<Description>
(170 lb, 77 kg)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pCountry:%String=""]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set countries = $ListBuild("GBR", "USA", "BRA", "JAM", "AUS", "CAN", "SWE", "NGR", "KOR", "ISL", "BEL", "ARG", "RUS", "GER", "JPN", "FRA", "DOM", "AFG", "SER", "MEX", "GH", "NOR", "ENG", "IRE"),
		fighters = ##class(%ArrayOfDataTypes).%New()
	
	Set:pCountry="" pCountry = ..Sample(countries)	
	
 	Do fighters.SetAt($ListBuild("Dan Hardy", "John Hathaway", "Leon Edwards", "Tom Breese", "Danny Roberts", "Darren Till"),"GBR")
 	Do fighters.SetAt($ListBuild("Donald Cerrone", "Matt Brown", "Robbie Lawler", "Carlos Condit", "Jake Ellenberger", "Mike Pyle", "Neil Magny", "Jorge Masvidal", "Tyron Woodley", "Tim Means", "Ben Saunders", "Court McGee", "Stephen Thompson", "Yancy Medeiros", "Alan Jouban", "Colby Covington", "Ryan LaFlare", "Zak Cummings", "Sean Strickland", "George Sullivan", "Belal Muhammad", "Dominique Steele", "Mickey Gall", "Michael Graves", "Mike Perry", "Alex Morono", "Niko Price", "Nathan Coy", "Max Griffin", "Zak Ottow", "Lyman Good", "CM Punk", "Sabah Homasi", "Brian Camozzi", "Bobby Nash"),"USA")
 	Do fighters.SetAt($ListBuild("Demian Maia", "Erick Silva", "Roan Carneiro", "Alex Oliveira", "Sérgio Moraes", "Warlley Alves", "Vicente Luque", "Viscardi Andrade", "Alberto Mina", "Elizeu Zaleski dos Santos", "Cláudio Silva", "Antônio Braga Neto", "Luan Chagas", "Davi Ramos"),"BRA")
 	Do fighters.SetAt($ListBuild("Randy Brown"),"JAM")
 	Do fighters.SetAt($ListBuild("Richard Walsh"),"AUS")
 	Do fighters.SetAt($ListBuild("Georges St-Pierre", "Patrick C", "Chad Laprise", "Jordan Mein", "Sheldon Westcott", "Jonathan Meunier"),"CAN")
 	Do fighters.SetAt($ListBuild("Nico Musoke"),"SWE")
 	Do fighters.SetAt($ListBuild("Kamaru Usman"),"NGR")
 	Do fighters.SetAt($ListBuild("Dong Hyun Kim", "Hyun Gyu Lim"),"KOR")
 	Do fighters.SetAt($ListBuild("Gunnar Nelson"),"ISL")
 	Do fighters.SetAt($ListBuild("Tarec Saffiedine"),"BEL")
 	Do fighters.SetAt($ListBuild("Santiago Ponzinibbio"),"ARG")
 	Do fighters.SetAt($ListBuild("Omari Akhmedov", "Alexander Yakovlev", "Sultan Aliev"),"RUS")
 	Do fighters.SetAt($ListBuild("Peter Sobotta", "Jessin Ayari"),"GER")
 	Do fighters.SetAt($ListBuild("Yoshihiro Akiyama", "Keita Nakamura", "Kiichi Kunimoto", "Shinsho Anzai"),"JPN")
 	Do fighters.SetAt($ListBuild("Nordine Taleb"),"FRA")
 	Do fighters.SetAt($ListBuild("Alex Garcia"),"DOM")
 	Do fighters.SetAt($ListBuild("Siyar Bahadurzada"),"AFG")
 	Do fighters.SetAt($ListBuild("Bojan Velickovic"),"SER")
 	Do fighters.SetAt($ListBuild("Alvaro Herrera"),"MEX")
 	Do fighters.SetAt($ListBuild("Abdul Razak Alhassan"),"GH")
 	Do fighters.SetAt($ListBuild("Emil Weber Meek"),"NOR")
 	Do fighters.SetAt($ListBuild("Jim Wallhead"),"ENG")
 	Do fighters.SetAt($ListBuild("Charlie Ward"),"IRE")
	
	Quit ..Sample(fighters.GetAt(pCountry))
]]></Implementation>
</Method>

<Method name="Lightweight">
<Description>
(155 lb, 70 kg)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pCountry:%String=""]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set countries = $ListBuild("GBR", "USA", "BRA", "AUS", "POL", "CAN", "SWE", "KOR", "RUS", "GER", "JPN", "MEX", "ENG", "IRE", "IRN", "GUM", "AUT", "SCT", "FIN", "BIH", "PER"),
		fighters = ##class(%ArrayOfDataTypes).%New()
	
	Set:pCountry="" pCountry = ..Sample(countries)	
	
 	Do fighters.SetAt($ListBuild("Ross Pearson"),"GBR")
 	Do fighters.SetAt($ListBuild("Jim Miller", "Diego Sanchez", "Nate Diaz", "Joe Lauzon", "Dustin Poirier", "Nik Lentz", "Evan Dunham", "Josh Burkman", "Michael Johnson", "Matt Wiman", "Tony Ferguson", "Erik Koch", "Bobby Green", "Kevin Lee", "Michael Chiesa", "Al Iaquinta", "Abel Trujillo", "James Krause", "Gilbert Melendez", "James Vick", "Paul Felder", "Joe Proctor", "Drew Dober", "Chris Wade", "Tony Martin", "Johnny Case", "Eddie Alvarez", "Bryan Barberena", "Sage Northcutt", "Alex White", "Scott Holtzman", "Andrew Holbrook", "Vinc Pichel", "Frankie Perez", "Lando Vannata", "Josh Emmett", "Will Brooks", "Joe Ellenberger", "Jason Gonzaléz", "Gregor Gillespie", "Drakkar Klose", "Darrell Horcher", "Michael McBride", "Jordan Rinaldi", "Devin Powell", "Michel Quinones", "Desmond Green"),"USA")
 	Do fighters.SetAt($ListBuild("Gleison Tibau", "Rafael dos Anjos", "Thiago Alves", "Edson Barboza", "Francisco Trinaldo", "Michel Prazeres", "Adriano Martins", "Leonardo Santos", "Gilbert Burns", "Alan Patrick", "Carlos Diego Ferreira", "Joaquim Silva", "Felipe Silva"),"BRA")
 	Do fighters.SetAt($ListBuild("Jake Matthews", "Damien Brown", "Alexander Volkanovski"),"AUS")
 	Do fighters.SetAt($ListBuild("Marcin Held"),"POL")
 	Do fighters.SetAt($ListBuild("John Makdessi", "TJ Grant", "Olivier Aubin-Mercier", "Mitch Clarke", "Jason Saggo", "Kajan Johnson", "Alessandro Ricci"),"CAN")
 	Do fighters.SetAt($ListBuild("David Teymur"),"SWE")
 	Do fighters.SetAt($ListBuild("Tae Hyun Bang", "Dong Hyun Kim"),"KOR")
 	Do fighters.SetAt($ListBuild("Rustam Khabilov", "Khabib Nurmagomedov", "Rashid Magomedov", "Islam Makhachev", "Magomed Mustafaev"),"RUS")
 	Do fighters.SetAt($ListBuild("Nick Hein"),"GER")
 	Do fighters.SetAt($ListBuild("Takanori Gomi"),"JPN")
 	Do fighters.SetAt($ListBuild("Marco Polo Reyes", "Martin Bravo"),"MEX")
 	Do fighters.SetAt($ListBuild("Marc Diakiese"),"ENG")
 	Do fighters.SetAt($ListBuild("Conor McGregor (C)", "Joseph Duffy"),"IRE")
 	Do fighters.SetAt($ListBuild("Beneil Dariush", "Reza Madadi"),"IRN")
 	Do fighters.SetAt($ListBuild("Jon Tuck"),"GUM")
 	Do fighters.SetAt($ListBuild("Mairbek Taisumov"),"AUT")
 	Do fighters.SetAt($ListBuild("Stevie Ray"),"SCT")
 	Do fighters.SetAt($ListBuild("Teemu Packalén"),"FIN")
 	Do fighters.SetAt($ListBuild("Damir Hadžvic"),"BIH")
 	Do fighters.SetAt($ListBuild("Claudio Puelles"),"PER")
 	
	Quit ..Sample(fighters.GetAt(pCountry))
]]></Implementation>
</Method>

<Method name="Bantamweight">
<Description>
(135 lb, 61 kg)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pCountry:%String=""]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set countries = $ListBuild("GBR", "USA", "BRA", "POL", "CAN", "WAL", "KOR", "ARG", "JPN", "FRA", "MEX", "ECU", "LAO"),
		fighters = ##class(%ArrayOfDataTypes).%New()
	
	Set:pCountry="" pCountry = ..Sample(countries)	
	
 	Do fighters.SetAt($ListBuild("Ian Entwistle", "David Grant"),"GBR")
 	Do fighters.SetAt($ListBuild("Eddie Wineland", "Dominick Cruz", "TJ Dillashaw", "John Dodson", "Bryan Caraway", "Justin Scoggins", "Cody Garbrandt", "Frankie Saenz", "Russell Doane", "Aljamain Sterling", "Joe Soto", "Jimmie Rivera", "Rob Font", "Albert Morales", "Chris Holdsworth", "Patrick Williams", "Luke Sanders", "Matthew Lopez"),"USA")
 	Do fighters.SetAt($ListBuild("Rani Yahya", "Raphael Assunção", "Iuri Alcântara", "John Lineker", "Felipe Arantes", "Thomas Almeida", "Pedro Munhoz", "Johnny Eduardo", "Douglas Silva de Andrade", "Reginaldo Vieira", "Augusto Mendes", "Ricardo Ramos"),"BRA")
 	Do fighters.SetAt($ListBuild("Damian Stasiak"),"POL")
 	Do fighters.SetAt($ListBuild("Mitch Gagnon", "Aiemann Zahabi"),"CAN")
 	Do fighters.SetAt($ListBuild("Brett Johns"),"WAL")
 	Do fighters.SetAt($ListBuild("Kyung Ho Kang", "Kwan Ho Kwak"),"KOR")
 	Do fighters.SetAt($ListBuild("Guido Cannetti"),"ARG")
 	Do fighters.SetAt($ListBuild("Michinori Tanaka", "Norifumi Yamamoto"),"JPN")
 	Do fighters.SetAt($ListBuild("Tom Duquesnoy"),"FRA")
 	Do fighters.SetAt($ListBuild("Alejandro Pérez", "Marco Beltrán", "José Quiñónez", "Henry Briones"),"MEX")
 	Do fighters.SetAt($ListBuild("Marlon Vera"),"ECU")
 	Do fighters.SetAt($ListBuild("Andre Soukhamthath"),"LAO")
 	
	Quit ..Sample(fighters.GetAt(pCountry))
]]></Implementation>
</Method>

<Method name="Flyweight">
<Description>
(125 lb, 56 kg)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pCountry:%String=""]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	Set countries = $ListBuild("USA", "BRA", "AUS", "RUS", "JPN", "MEX", "IRE", "PHL"),
		fighters = ##class(%ArrayOfDataTypes).%New()
	
	Set:pCountry="" pCountry = ..Sample(countries)	
	
	Do fighters.SetAt($ListBuild("Joseph Benavidez", "Demetrious Johnson", "John Moraga", "Ian McCall", "Dustin Ortiz", "Sergio Pettis", "Louis Smolka", "Ray Borg", "Tim Elliott", "Henry Cejudo", "Ben Nguyen", "Ryan Benoit", "Eric Shelton", "Matt Schnell", "Jarred Brooks"),"USA")
 	Do fighters.SetAt($ListBuild("Jussier Formiga", "Wilson Reis", "Matheus Nicolau", "Alexandre Pantoja", "Deiveson Alcântara"),"BRA")
 	Do fighters.SetAt($ListBuild("Askhan Mokhtarian"),"AUS")
 	Do fighters.SetAt($ListBuild("Magomed Bibulatov"),"RUS")
 	Do fighters.SetAt($ListBuild("Ulka Sasaki"),"JPN")
 	Do fighters.SetAt($ListBuild("Brandon Moreno", "Hector Sandoval"),"MEX")
 	Do fighters.SetAt($ListBuild("Neil Seery"),"IRE")
 	Do fighters.SetAt($ListBuild("Jenel Lausa"),"PHL")
	
	Quit ..Sample(fighters.GetAt(pCountry))
]]></Implementation>
</Method>

<Method name="Heavyweight">
<Description>
(265 lb, 120 kg)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pCountry:%String=""]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	Set countries = $ListBuild("USA", "BRA", "NED", "AUS", "POL", "RUS", "FRA", "MEX", "ENG", "NZL", "BLR", "CMR", "DNK", "SYR", "UKR"),
		fighters = ##class(%ArrayOfDataTypes).%New()
	
	Set:pCountry="" pCountry = ..Sample(countries)	
	
 	Do fighters.SetAt($ListBuild("Frank Mir", "Roy Nelson", "Travis Browne", "Josh Barnett", "Stipe Miocic", "Derrick Lewis", "Ben Rothwell", "Anthony Hamilton", "Walt Harris", "Todd Duffee", "Timothy Johnson", "Justin Ledet", "Curtis Blaydes", "Adam Milstead", "Chris De La Rocha", "Chase Sherman", "Daniel Spitz", "Justin Willis"),"USA")
 	Do fighters.SetAt($ListBuild("Junior Dos Santos", "Fabrício Werdum", "Luis Henrique", "Marcel Fortuna"),"BRA")
 	Do fighters.SetAt($ListBuild("Stefan Struve", "Alistair Overeem"),"NED")
 	Do fighters.SetAt($ListBuild("Tai Tuivasa"),"AUS")
 	Do fighters.SetAt($ListBuild("Daniel Omielanczuk", "Marcin Tybura", "Damian Grabowski", "Adam Wieczorek"),"POL")
 	Do fighters.SetAt($ListBuild("Oleksiy Oliynyk", "Shamil Abdurakhimov", "Ruslan Magomedov", "Dmitrii Smolyakov", "Alexander Volkov", "Bilyal Makhov", "Dmitriy Sosnovskiy"),"RUS")
 	Do fighters.SetAt($ListBuild("Cyril Asker"),"FRA")
 	Do fighters.SetAt($ListBuild("Cain Velasquez"),"MEX")
 	Do fighters.SetAt($ListBuild("Mark Godbeer"),"ENG")
 	Do fighters.SetAt($ListBuild("Mark Hunt"),"NZL")
 	Do fighters.SetAt($ListBuild("Andrei Arlovski"),"BLR")
 	Do fighters.SetAt($ListBuild("Francis Ngannou"),"CMR")
 	Do fighters.SetAt($ListBuild("Christian Colombo"),"DNK")
 	Do fighters.SetAt($ListBuild("Jarjis Danho"),"SYR")
 	Do fighters.SetAt($ListBuild("Dmitry Poberezhets"),"UKR")
	
	Quit ..Sample(fighters.GetAt(pCountry))
]]></Implementation>
</Method>

<Method name="LightHeavyweight">
<Description>
(205 lb, 93 kg)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pCountry:%String=""]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	Set countries = $ListBuild("GBR", "USA", "BRA", "AUS", "POL", "CAN", "SWE", "WAL", "RUS", "SER", "ENG", "AUT", "SCT", "HTI", "HRV", "LVA", "MDA", "DNK", "CHE"),
		fighters = ##class(%ArrayOfDataTypes).%New()
	
	Set:pCountry="" pCountry = ..Sample(countries)	
	
 	Do fighters.SetAt($ListBuild("Jimi Manuwa"),"GBR")
 	Do fighters.SetAt($ListBuild("Ed Herman", "Anthony Johnson", "Jon Jones", "Gian Villante", "Daniel Cormier (C)", "Tom Lawlor", "Corey Anderson", "Patrick Cummins", "Jared Cannonier", "Jonathan Wilson", "Khalil Rountree", "Devin Clark", "Josh Stansbury", "Daniel Jolly", "Jordan Johnson", "Jeremy Kimball"),"USA")
 	Do fighters.SetAt($ListBuild("Maurício Rua", "Glover Teixeira", "Antônio Rogério Nogueira", "Francimar Barroso", "Marcos Rogério de Lima", "Henrique da Silva"),"BRA")
 	Do fighters.SetAt($ListBuild("Tyson Pedro"),"AUS")
 	Do fighters.SetAt($ListBuild("Jan Blachowicz"),"POL")
 	Do fighters.SetAt($ListBuild("Steve Bossé"),"CAN")
 	Do fighters.SetAt($ListBuild("Alexander Gustafsson", "Ilir Latifi"),"SWE")
 	Do fighters.SetAt($ListBuild("John Phillips"),"WAL")
 	Do fighters.SetAt($ListBuild("Gadzhimurad Antigulov", "Saparbek Safarov", "Abdul-Kerim Edilov"),"RUS")
 	Do fighters.SetAt($ListBuild("Bojan Mihajlovic"),"SER")
 	Do fighters.SetAt($ListBuild("Darren Stewart"),"ENG")
 	Do fighters.SetAt($ListBuild("Aleksandar Rakic"),"AUT")
 	Do fighters.SetAt($ListBuild("Paul Craig"),"SCT")
 	Do fighters.SetAt($ListBuild("Ovince Saint Preux"),"HTI")
 	Do fighters.SetAt($ListBuild("Igor Pokrajac"),"HRV")
 	Do fighters.SetAt($ListBuild("Misha Cirkunov"),"LVA")
 	Do fighters.SetAt($ListBuild("Ion Cutelaba"),"MDA")
 	Do fighters.SetAt($ListBuild("Joachim Christensen"),"DNK")
 	Do fighters.SetAt($ListBuild("Volkan Oezdemir"),"CHE")
 	
	Quit ..Sample(fighters.GetAt(pCountry))
]]></Implementation>
</Method>

<Method name="Nickname">
<ClassMethod>1</ClassMethod>
<FormalSpec>pFighter:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If pFighter="" {
		Set nick = $ListBuild("Pit Bull","Skyscraper","Big Country","Hapa","The Warmaster","The Black Beast","Big","The Bear", "Freight Train", "The Big Ticket", "The Predator", "Leopard", "Razor", "Tybur", "The Hand", "The Prototype", "Silverback", "Godzilla", "Man Mountain", "The Lifeguard", "The Gorilla", "Drago","Daddy Long Legs", "Wicked Machine", "Big Pretty", "Siwy", "Hot Fuse", "Rumble", "Shogun", "The Duke", "Little Dog", "Poster Boy", "The Sledgehammer", "Frankenstein", "The Boss", "The Hulk", "The War Horse", "Brown Bear", "The Sandman", "Werewolf", "The Dentist", "The Big Swinging", "Grizzly", "The Great", "The Phenom", "The Spider", "Bigg Rigg", "The Dragon", "The Barbarian", "The Doberman", "The Dreamcatcher", "Hot Sauce", "The Reaper", "Soldier of God", "Lionheart", "The Spartan", "Bear", "Lex Luthor", "Soldier Boy", "Holy War Angel", "The Joker", "The Hammer", "Prime Time", "The Prototype",  "El Dirte", "Cowboy",  "Rush", "The Immortal", "Ruthless",   "The Natural Born Killer", "The Juggernaut", "Quicksand",   "The Stun Gun", "Gamebred", "The Chosen One", "The Dirty Bird",  "The Tiger", "Killer", "The Crusher", "Wonderboy", "The Outlaw",  "The Hitman", "The Kid", "Brahma", "Sponge", "The Panther", "Chaos",  "Rocky", "Wolverine", "Sexyama", "Tarzan", "Slingshot", "The Machine",  "Disciple", "The Nightmare", "The Silent Assassin", "The Ace",  "Young Gun", "Filthy Rich", "Thunder", "The Silencer", "Rude Boy",   "The Octopus", "Strasser", "Remember the Name", "Nonstop Action-Packed",  "Hot Chocolate", "Capoeira", "Platinum", "The Great White", "Steel",  "Hannibal", "The Hybrid", "Animal", "Soulforce", "Pain",   "Chango", "Abacus", "Cyborg", "Judo Thunder", "Valhalla",  "The Problem", "Judo", "Relentless", "The Mantis",   "Nashty", "Tasmanian Devil", "Tibau", "The Real Deal", "The Diamond",  "The Carny", "Junior", "The People's Warrior",  "The Menace", "Handsome", "Massaranduba", "El Cucuy",   "The Bull", "The Fireball Kid", "New Breed", "King", "Benny",  "The Notorious", "The Motown Phenom",   "Maverick", "Raging", "Tiger", "Killa", "The Eagle", "Tractor", "El Niño",  "The Super Saiyan", "Mad Dog", "Danger Zone", "Hollywood",   "Sergeant",   "Braveheart", "The Underground King", "Super",  "Bonecrusher",   "El Toro", "Beatdown", "Ragin", "From Hell", "The Maestro",   "Pacu", "Groovy", "Ill Will", "Excalibur", "The Gift", "The Bomber",   "The Saint", "All Day", "Capo", "The Carpenter", "Lil Heathen",  "The Prodigy", "The Answer", "Killer Cub", "The Bully",  "Money", "Showtime", "Blessed", "The Damage", "The Baron",   "The Fury", "The Scrapper", "The Zombie", "El Pantera", "The Hangman",  "T-City", "Pugnus", "Mr. Finland", "Moggly", "Warrior", "The Superboy",   "Yashabo", "Smasher", "The Hammer", "Strong", "Almighty", "El Fuerte",  "The Wizard", "Gritz", "The Gladiator", "Crash", "Hurricane",   "Guv Nor", "Barracuda", "Flash", "Dominator", "Hands of Stone",  "The Viper", "The Magician", "Kid Lightning", "Tank", "No Love",  "The Young Punisher", "Funk Master", "One Bad Mofo", "Diablito",  "Chito", "El Terror", "Psycho", "Mr. Perfect",   "Kid", "Teco", "Bure", "Enty", "Dangerous", "The Warrior",  "Holds It Down", "Ninja", "The Animal", "Cool Hand", "The Pikey", "The Sensation", "Firekid", "The Beefcake", "Mighty Mouse",  "Uncle Creepy", "Da Last Samurai", "The Messenger", "Baby Face", "The Assassin Baby", "Kid Alex",  "Da Demolition Man", "The Cannibal",  "Danger", "The Monkey God", "The Assassin")
		Quit ..Sample(nick)
	} Else {
		Set fighterNickname = ##class(%ArrayOfDataTypes).%New()
		Do fighterNickname.SetAt("Pit Bull","Andrei Arlovski")
		Do fighterNickname.SetAt("Skyscraper","Stefan Struve")
		Do fighterNickname.SetAt("Big Country","Roy Nelson")
		Do fighterNickname.SetAt("Cigano","Junior Dos Santos")
		Do fighterNickname.SetAt("Hapa","Travis Browne")
		Do fighterNickname.SetAt("The Warmaster","Josh Barnett")
		Do fighterNickname.SetAt("Vai Cavalo","Fabrício Werdum")
		Do fighterNickname.SetAt("Super Samoan","Mark Hunt")
		Do fighterNickname.SetAt("The Black Beast","Derrick Lewis")
		Do fighterNickname.SetAt("The Reem","Alistair Overeem")
		Do fighterNickname.SetAt("Big","Ben Rothwell")
		Do fighterNickname.SetAt("Polish Bear","Daniel Omielanczuk")
		Do fighterNickname.SetAt("Freight Train","Anthony Hamilton")
		Do fighterNickname.SetAt("The Big Ticket","Walt Harris")
		Do fighterNickname.SetAt("The Predator","Francis Ngannou")
		Do fighterNickname.SetAt("The Boa Constrictor","Oleksiy Oliynyk")
		Do fighterNickname.SetAt("Abrek","Shamil Abdurakhimov")
		Do fighterNickname.SetAt("KLB","Luis Henrique")
		Do fighterNickname.SetAt("Leopard","Ruslan Magomedov")
		Do fighterNickname.SetAt("El Blanco","Justin Ledet")
		Do fighterNickname.SetAt("Razor","Curtis Blaydes")
		Do fighterNickname.SetAt("Tybur","Marcin Tybura")
		Do fighterNickname.SetAt("The Hand Of","Mark Godbeer")
		Do fighterNickname.SetAt("The Prototype","Adam Milstead")
		Do fighterNickname.SetAt("Silverback","Cyril Asker")
		Do fighterNickname.SetAt("Godzilla","Christian Colombo")
		Do fighterNickname.SetAt("Man Mountain","Jarjis Danho")
		Do fighterNickname.SetAt("The Polish Pitbull","Damian Grabowski")
		Do fighterNickname.SetAt("The Lifeguard","Dmitrii Smolyakov")
		Do fighterNickname.SetAt("The Vanilla Gorilla","Chase Sherman")
		Do fighterNickname.SetAt("Drago","Alexander Volkov")
		Do fighterNickname.SetAt("Marcinha","Marcel Fortuna")
		Do fighterNickname.SetAt("The Daddy Long Legs","Daniel Spitz")
		Do fighterNickname.SetAt("Wicked Machine","Dmitriy Sosnovskiy")
		Do fighterNickname.SetAt("Bam Bam","Tai Tuivasa")
		Do fighterNickname.SetAt("Big Pretty","Justin Willis")
		Do fighterNickname.SetAt("Siwy","Adam Wieczorek")
		Do fighterNickname.SetAt("Short Fuse","Ed Herman")
		Do fighterNickname.SetAt("Rumble","Anthony Johnson")
		Do fighterNickname.SetAt("Shogun","Maurício Rua")
		Do fighterNickname.SetAt("Bones","Jon Jones")
		Do fighterNickname.SetAt("OSP","Ovince Saint Preux")
		Do fighterNickname.SetAt("The Mauler","Alexander Gustafsson")
		Do fighterNickname.SetAt("The Duke","Igor Pokrajac")
		Do fighterNickname.SetAt("DC","Daniel Cormier (C)")
		Do fighterNickname.SetAt("Filthy","Tom Lawlor")
		Do fighterNickname.SetAt("Little Nog","Antônio Rogério Nogueira")
		Do fighterNickname.SetAt("Overtime","Corey Anderson")
		Do fighterNickname.SetAt("Poster Boy","Jimi Manuwa")
		Do fighterNickname.SetAt("The Sledgehammer","Ilir Latifi")
		Do fighterNickname.SetAt("Durkin","Patrick Cummins")
		Do fighterNickname.SetAt("Bodão","Francimar Barroso")
		Do fighterNickname.SetAt("Pezão","Marcos Rogério de Lima")
		Do fighterNickname.SetAt("Ksiaze Cieszynski","Jan Blachowicz")
		Do fighterNickname.SetAt("Frankenstein","Henrique da Silva")
		Do fighterNickname.SetAt("Tha Killa Gorilla","Jared Cannonier")
		Do fighterNickname.SetAt("The Boss","Steve Bossé")
		Do fighterNickname.SetAt("The Hulk","Ion Cutelaba")
		Do fighterNickname.SetAt("Johnny Bravo","Jonathan Wilson")
		Do fighterNickname.SetAt("The War Horse","Khalil Rountree")
		Do fighterNickname.SetAt("Brown Bear","Devin Clark")
		Do fighterNickname.SetAt("The Sandman","Josh Stansbury")
		Do fighterNickname.SetAt("Bearjew","Paul Craig")
		Do fighterNickname.SetAt("Werewolf of Texas","Daniel Jolly")
		Do fighterNickname.SetAt("The Dentist","Darren Stewart")
		Do fighterNickname.SetAt("The Big Swinging","Jordan Johnson")
		Do fighterNickname.SetAt("Cousin","Volkan Oezdemir")
		Do fighterNickname.SetAt("Grizzly","Jeremy Kimball")
		Do fighterNickname.SetAt("The Chechnyan Lion","Abdul-Kerim Edilov")
		Do fighterNickname.SetAt("The White Mike Tyson","John Phillips")
		Do fighterNickname.SetAt("The Count","Michael Bisping (C)")
		Do fighterNickname.SetAt("The Great","Nate Marquardt")
		Do fighterNickname.SetAt("The Phenom","Vitor Belfort")
		Do fighterNickname.SetAt("The Spider","Anderson Silva")
		Do fighterNickname.SetAt("Bigg Rigg","Johny Hendricks")
		Do fighterNickname.SetAt("The Dragon","Lyoto Machida")
		Do fighterNickname.SetAt("The Barbarian","Tim Boetsch")
		Do fighterNickname.SetAt("Suga","Rashad Evans")
		Do fighterNickname.SetAt("The Doberman","CB Dollaway")
		Do fighterNickname.SetAt("Sapo","Rafael Natal")
		Do fighterNickname.SetAt("The Dreamcatcher","Gegard Mousasi")
		Do fighterNickname.SetAt("Jacaré","Ronaldo Souza")
		Do fighterNickname.SetAt("The All-American","Chris Weidman")
		Do fighterNickname.SetAt("Hot Sauce","Trevor Smith")
		Do fighterNickname.SetAt("Prime Time","Uriah Hall")
		Do fighterNickname.SetAt("Mutante","Cezar Ferreira")
		Do fighterNickname.SetAt("The Reaper","Robert Whittaker")
		Do fighterNickname.SetAt("Smile'N","Sam Alvey")
		Do fighterNickname.SetAt("Marreta","Thiago Santos")
		Do fighterNickname.SetAt("Soldier of God","Yoel Romero")
		Do fighterNickname.SetAt("Showeather","Hector Lombard")
		Do fighterNickname.SetAt("Lionheart","Anthony Smith")
		Do fighterNickname.SetAt("The Spartan","Elias Theodorou")
		Do fighterNickname.SetAt("Cara de Sapato","Antônio Carlos Júnior")
		Do fighterNickname.SetAt("Jycken","Magnus Cedenblad")
		Do fighterNickname.SetAt("Bear","Bradley Scott")
		Do fighterNickname.SetAt("Lex Luthor","Vitor Miranda")
		Do fighterNickname.SetAt("Soldier Boy","Garreth McLellan")
		Do fighterNickname.SetAt("The Prototype","Jake Collier")
		Do fighterNickname.SetAt("Magrão","Marcelo Guimarães")
		Do fighterNickname.SetAt("Zebrinha","Eric Spicely")
		Do fighterNickname.SetAt("Holy War Angel","Oluwale Bamgbose")
		Do fighterNickname.SetAt("Manzo","Alessio Di Chirico")
		Do fighterNickname.SetAt("The Spartan","Alex Nicholson")
		Do fighterNickname.SetAt("GM3","Gerald Meerschaert")
		Do fighterNickname.SetAt("El Dirte","Andrew Sanchez")
		Do fighterNickname.SetAt("The Joker","Jack Hermansson")
		Do fighterNickname.SetAt("The Hammer","Jack Marshman")
		Do fighterNickname.SetAt("Borrachinha","Paulo Henrique Costa")
		Do fighterNickname.SetAt("Sha Bang Bang","Keith Berish")
		Do fighterNickname.SetAt("Cowboy","Donald Cerrone")
		Do fighterNickname.SetAt("Rush","Georges St-Pierre")
		Do fighterNickname.SetAt("The Immortal","Matt Brown")
		Do fighterNickname.SetAt("Ruthless","Robbie Lawler")
		Do fighterNickname.SetAt("The Predator","Patrick Côté")
		Do fighterNickname.SetAt("The Natural Born Killer","Carlos Condit")
		Do fighterNickname.SetAt("The Juggernaut","Jake Ellenberger")
		Do fighterNickname.SetAt("Quicksand","Mike Pyle")
		Do fighterNickname.SetAt("The Stun Gun","Dong Hyun Kim")
		Do fighterNickname.SetAt("Gamebred","Jorge Masvidal")
		Do fighterNickname.SetAt("The Chosen One","Tyron Woodley (C)")
		Do fighterNickname.SetAt("The Dirty Bird","Tim Means")
		Do fighterNickname.SetAt("The Tiger","Erick Silva")
		Do fighterNickname.SetAt("Killa B","Ben Saunders")
		Do fighterNickname.SetAt("The Crusher","Court McGee")
		Do fighterNickname.SetAt("Wonderboy","Stephen Thompson")
		Do fighterNickname.SetAt("The Outlaw","Dan Hardy")
		Do fighterNickname.SetAt("The Hitman","John Hathaway")
		Do fighterNickname.SetAt("Gunni","Gunnar Nelson")
		Do fighterNickname.SetAt("The Kid","Yancy Medeiros")
		Do fighterNickname.SetAt("Jucão","Roan Carneiro")
		Do fighterNickname.SetAt("Brahma","Alan Jouban")
		Do fighterNickname.SetAt("Sponge","Tarec Saffiedine")
		Do fighterNickname.SetAt("Cowboy","Alex Oliveira")
		Do fighterNickname.SetAt("Gente Boa","Santiago Ponzinibbio")
		Do fighterNickname.SetAt("The Panther","Sérgio Moraes")
		Do fighterNickname.SetAt("Chaos","Colby Covington")
		Do fighterNickname.SetAt("Rocky","Leon Edwards")
		Do fighterNickname.SetAt("Wolverine","Omari Akhmedov")
		Do fighterNickname.SetAt("Sexyama","Yoshihiro Akiyama")
		Do fighterNickname.SetAt("K-Taro","Keita Nakamura")
		Do fighterNickname.SetAt("Tarzan","Sean Strickland")
		Do fighterNickname.SetAt("Slingshot","Warlley Alves")
		Do fighterNickname.SetAt("The Machine","Nordine Taleb")
		Do fighterNickname.SetAt("Disciple","Chad Laprise")
		Do fighterNickname.SetAt("The Dominican Nightmare","Alex Garcia")
		Do fighterNickname.SetAt("The Silent Assassin","Vicente Luque")
		Do fighterNickname.SetAt("The Ace","Hyun Gyu Lim")
		Do fighterNickname.SetAt("Young Gun","Jordan Mein")
		Do fighterNickname.SetAt("Filthy Rich","Richard Walsh")
		Do fighterNickname.SetAt("Thunder of the North","Alexander Yakovlev")
		Do fighterNickname.SetAt("Nico","Nico Musoke")
		Do fighterNickname.SetAt("The Silencer","George Sullivan")
		Do fighterNickname.SetAt("Rude Boy","Randy Brown")
		Do fighterNickname.SetAt("The Nigerian Nightmare","Kamaru Usman")
		Do fighterNickname.SetAt("The Octopus","Tom Breese")
		Do fighterNickname.SetAt("Strasser","Kiichi Kunimoto")
		Do fighterNickname.SetAt("The Great","Siyar Bahadurzada")
		Do fighterNickname.SetAt("Remember the Name","Belal Muhammad")
		Do fighterNickname.SetAt("Nonstop Action-Packed","Dominique Steele")
		Do fighterNickname.SetAt("Soldier of God","Alberto Mina")
		Do fighterNickname.SetAt("Hot Chocolate","Danny Roberts")
		Do fighterNickname.SetAt("Capoeira","Elizeu Zaleski dos Santos")
		Do fighterNickname.SetAt("Platinum","Mike Perry")
		Do fighterNickname.SetAt("The Great White","Alex Morono")
		Do fighterNickname.SetAt("Serbian Steel","Bojan Velickovic")
		Do fighterNickname.SetAt("Hannibal","Cláudio Silva")
		Do fighterNickname.SetAt("The Hybrid","Niko Price")
		Do fighterNickname.SetAt("Animal","Shinsho Anzai")
		Do fighterNickname.SetAt("Soulforce","Nathan Coy")
		Do fighterNickname.SetAt("Pain","Max Griffin")
		Do fighterNickname.SetAt("Chango","Alvaro Herrera")
		Do fighterNickname.SetAt("The French Spider","Jonathan Meunier")
		Do fighterNickname.SetAt("The Barbarian","Zak Ottow")
		Do fighterNickname.SetAt("Tarzan","Luan Chagas")
		Do fighterNickname.SetAt("Abacus","Jessin Ayari")
		Do fighterNickname.SetAt("Cyborg","Lyman Good")
		Do fighterNickname.SetAt("Judo Thunder","Abdul Razak Alhassan")
		Do fighterNickname.SetAt("Valhalla","Emil Weber Meek")
		Do fighterNickname.SetAt("CM Punk","CM Punk")
		Do fighterNickname.SetAt("The Problem","Sabah Homasi")
		Do fighterNickname.SetAt("Judo","Jim Wallhead")
		Do fighterNickname.SetAt("Relentless","Charlie Ward")
		Do fighterNickname.SetAt("The Mantis","Brian Camozzi")
		Do fighterNickname.SetAt("Nashty","Bobby Nash")
		Do fighterNickname.SetAt("Tasmanian Devil","Davi Ramos")
		Do fighterNickname.SetAt("Tibau","Gleison Tibau")
		Do fighterNickname.SetAt("The Nightmare","Diego Sanchez")
		Do fighterNickname.SetAt("J-Lau","Joe Lauzon")
		Do fighterNickname.SetAt("The Real Deal","Ross Pearson")
		Do fighterNickname.SetAt("Pitbull","Thiago Alves")
		Do fighterNickname.SetAt("The Diamond","Dustin Poirier")
		Do fighterNickname.SetAt("The Carny","Nik Lentz")
		Do fighterNickname.SetAt("Junior","Edson Barboza")
		Do fighterNickname.SetAt("The People's Warrior","Josh Burkman")
		Do fighterNickname.SetAt("The Menace","Michael Johnson")
		Do fighterNickname.SetAt("Handsome","Matt Wiman")
		Do fighterNickname.SetAt("Massaranduba","Francisco Trinaldo")
		Do fighterNickname.SetAt("El Cucuy","Tony Ferguson")
		Do fighterNickname.SetAt("The Bull","John Makdessi")
		Do fighterNickname.SetAt("The Fireball Kid","Takanori Gomi")
		Do fighterNickname.SetAt("New Breed","Erik Koch")
		Do fighterNickname.SetAt("King","Bobby Green")
		Do fighterNickname.SetAt("Benny","Beneil Dariush")
		Do fighterNickname.SetAt("The Notorious","Conor McGregor (C)")
		Do fighterNickname.SetAt("The Motown Phenom","Kevin Lee")
		Do fighterNickname.SetAt("Maverick","Michael Chiesa")
		Do fighterNickname.SetAt("Raging","Al Iaquinta")
		Do fighterNickname.SetAt("Tiger","Rustam Khabilov")
		Do fighterNickname.SetAt("Killa","Abel Trujillo")
		Do fighterNickname.SetAt("The James Krause","James Krause")
		Do fighterNickname.SetAt("The Eagle","Khabib Nurmagomedov")
		Do fighterNickname.SetAt("Tractor","Michel Prazeres")
		Do fighterNickname.SetAt("El Niño","Gilbert Melendez")
		Do fighterNickname.SetAt("The Texecutioner","James Vick")
		Do fighterNickname.SetAt("The Irish Dragon","Paul Felder")
		Do fighterNickname.SetAt("The Quebec Kid","Olivier Aubin-Mercier")
		Do fighterNickname.SetAt("The Celtic Kid","Jake Matthews")
		Do fighterNickname.SetAt("The Super Saiyan","Jon Tuck")
		Do fighterNickname.SetAt("Nenhum","Leonardo Santos")
		Do fighterNickname.SetAt("Beckan","Mairbek Taisumov")
		Do fighterNickname.SetAt("Durinho","Gilbert Burns")
		Do fighterNickname.SetAt("Mad Dog","Reza Madadi")
		Do fighterNickname.SetAt("Danger Zone","Mitch Clarke")
		Do fighterNickname.SetAt("Hollywood","Johnny Case")
		Do fighterNickname.SetAt("Irish Joe","Joseph Duffy")
		Do fighterNickname.SetAt("Sergeant","Nick Hein")
		Do fighterNickname.SetAt("Goretz","Rashid Magomedov")
		Do fighterNickname.SetAt("Nuguette","Alan Patrick")
		Do fighterNickname.SetAt("Braveheart","Stevie Ray")
		Do fighterNickname.SetAt("The Underground King","Eddie Alvarez")
		Do fighterNickname.SetAt("Bam Bam","Bryan Barberena")
		Do fighterNickname.SetAt("Super","Sage Northcutt")
		Do fighterNickname.SetAt("The Spartan","Alex White")
		Do fighterNickname.SetAt("The Korean Cowboy","Tae Hyun Bang")
		Do fighterNickname.SetAt("Hot Sauce","Scott Holtzman")
		Do fighterNickname.SetAt("Bonecrusher","Marc Diakiese")
		Do fighterNickname.SetAt("El Toro","Marco Polo Reyes")
		Do fighterNickname.SetAt("Beatdown","Damien Brown")
		Do fighterNickname.SetAt("Ragin'","Kajan Johnson")
		Do fighterNickname.SetAt("From Hell","Vinc Pichel")
		Do fighterNickname.SetAt("The Maestro","Dong Hyun Kim")
		Do fighterNickname.SetAt("Pacu","Teemu Packalén")
		Do fighterNickname.SetAt("Groovy","Lando Vannata")
		Do fighterNickname.SetAt("Netto BJJ","Joaquim Silva")
		Do fighterNickname.SetAt("Ill Will","Will Brooks")
		Do fighterNickname.SetAt("Excalibur","Joe Ellenberger")
		Do fighterNickname.SetAt("Nicoya","Jason Gonzaléz")
		Do fighterNickname.SetAt("El Toro","Martin Bravo")
		Do fighterNickname.SetAt("The Gift","Gregor Gillespie")
		Do fighterNickname.SetAt("The Great","Alexander Volkanovski")
		Do fighterNickname.SetAt("The Bosnian Bomber","Damir Hadžovic")
		Do fighterNickname.SetAt("The Saint","Darrell Horcher")
		Do fighterNickname.SetAt("El Niño","Claudio Puelles")
		Do fighterNickname.SetAt("All Day","Jordan Rinaldi")
		Do fighterNickname.SetAt("Capo","Michel Quinones")
		Do fighterNickname.SetAt("The Predator","Desmond Green")
		Do fighterNickname.SetAt("The Carpenter","Clay Guida")
		Do fighterNickname.SetAt("Lil' Heathen","Jeremy Stephens")
		Do fighterNickname.SetAt("The Prodigy","BJ Penn")
		Do fighterNickname.SetAt("The Answer","Frankie Edgar")
		Do fighterNickname.SetAt("The Menace","Dennis Siver")
		Do fighterNickname.SetAt("Killer Cub","Cub Swanson")
		Do fighterNickname.SetAt("The Bully","Gray Maynard")
		Do fighterNickname.SetAt("Junior","José Aldo* (C)")
		Do fighterNickname.SetAt("The Bully","Ricardo Lamas")
		Do fighterNickname.SetAt("Do Bronx","Charles Oliveira")
		Do fighterNickname.SetAt("Money","Chad Mendes")
		Do fighterNickname.SetAt("Showtime","Anthony Pettis*")
		Do fighterNickname.SetAt("Blessed","Max Holloway (IC)")
		Do fighterNickname.SetAt("The Damage","Darren Elkins")
		Do fighterNickname.SetAt("Bruce Leeroy","Alex Caceres")
		Do fighterNickname.SetAt("The Baron","Renan Barão")
		Do fighterNickname.SetAt("The Menace","Dennis Bermudez")
		Do fighterNickname.SetAt("Pepey","Godofredo Pepey")
		Do fighterNickname.SetAt("Jason","Rony Jason")
		Do fighterNickname.SetAt("The Fury","Myles Jury")
		Do fighterNickname.SetAt("The Scrapper","Chas Skelly")
		Do fighterNickname.SetAt("The Korean Zombie","Chan Sung Jung")
		Do fighterNickname.SetAt("Barnabe","Hacran Dias")
		Do fighterNickname.SetAt("El Pantera","Yair Rodríguez")
		Do fighterNickname.SetAt("The Kid","Jimy Hettes")
		Do fighterNickname.SetAt("The Hangman","Dan Hooker")
		Do fighterNickname.SetAt("El Cucuy","Mike De La Torre")
		Do fighterNickname.SetAt("T-City","Brian Ortega")
		Do fighterNickname.SetAt("Pugnus","Mizuto Hirota")
		Do fighterNickname.SetAt("Mr. Finland","Makwan Amirkhani")
		Do fighterNickname.SetAt("Moggly","Gabriel Benítez")
		Do fighterNickname.SetAt("Warrior","Zubaira Tukhugov")
		Do fighterNickname.SetAt("The Korean Superboy","Doo Ho Choi")
		Do fighterNickname.SetAt("The Kid","Jason Knight")
		Do fighterNickname.SetAt("Yashabo","Teruto Ishihara")
		Do fighterNickname.SetAt("Smasher","Ning Guangyou")
		Do fighterNickname.SetAt("The Russian Hammer","Artem Lobov")
		Do fighterNickname.SetAt("Boston Strong","Charles Rosa")
		Do fighterNickname.SetAt("Almighty","Arnold Allen")
		Do fighterNickname.SetAt("El Fuerte","Enrique Barzola")
		Do fighterNickname.SetAt("The Wizard","Ryan Hall")
		Do fighterNickname.SetAt("JBC","Jeremy Kennedy")
		Do fighterNickname.SetAt("Moicano","Renato Moicano")
		Do fighterNickname.SetAt("Pitbull","Diego Rivas")
		Do fighterNickname.SetAt("Gritz","Chris Gruetzemacher")
		Do fighterNickname.SetAt("The Gladiator","Rick Glenn")
		Do fighterNickname.SetAt("Crash","Kyle Bochniak")
		Do fighterNickname.SetAt("Hurricane","Shane Burgos")
		Do fighterNickname.SetAt("Guv'Nor","Gavin Tucker")
		Do fighterNickname.SetAt("Barracuda","Martin Buschkamp")
		Do fighterNickname.SetAt("The Dongbei Tiger","Guan Wang")
		Do fighterNickname.SetAt("Flash","Jared Gordon")
		Do fighterNickname.SetAt("Marajó","Iuri Alcântara")
		Do fighterNickname.SetAt("Dominator","Dominick Cruz")
		Do fighterNickname.SetAt("Hands of Stone","John Lineker")
		Do fighterNickname.SetAt("The Viper","TJ Dillashaw")
		Do fighterNickname.SetAt("The Magician","John Dodson")
		Do fighterNickname.SetAt("Kid Lightning","Bryan Caraway")
		Do fighterNickname.SetAt("Sertanejo","Felipe Arantes")
		Do fighterNickname.SetAt("Tank","Justin Scoggins")
		Do fighterNickname.SetAt("The Machine","Mitch Gagnon")
		Do fighterNickname.SetAt("No Love","Cody Garbrandt (C)")
		Do fighterNickname.SetAt("Thominhas","Thomas Almeida")
		Do fighterNickname.SetAt("The Young Punisher","Pedro Munhoz")
		Do fighterNickname.SetAt("Funk Master","Aljamain Sterling")
		Do fighterNickname.SetAt("One Bad Mofo","Joe Soto")
		Do fighterNickname.SetAt("Diablito","Alejandro Pérez")
		Do fighterNickname.SetAt("Chito","Marlon Vera")
		Do fighterNickname.SetAt("El Terror","Jimmie Rivera")
		Do fighterNickname.SetAt("Psycho","Marco Beltrán")
		Do fighterNickname.SetAt("Mr. Perfect","Kyung Ho Kang")
		Do fighterNickname.SetAt("Kid","Norifumi Yamamoto")
		Do fighterNickname.SetAt("Teco","José Quiñónez")
		Do fighterNickname.SetAt("D'Silva","Douglas Silva de Andrade")
		Do fighterNickname.SetAt("Webster","Damian Stasiak")
		Do fighterNickname.SetAt("Bure","Henry Briones")
		Do fighterNickname.SetAt("Enty","Ian Entwistle")
		Do fighterNickname.SetAt("Dangerous","David Grant")
		Do fighterNickname.SetAt("The Warrior","Albert Morales")
		Do fighterNickname.SetAt("Holds It Down","Chris Holdsworth")
		Do fighterNickname.SetAt("Ninja","Guido Cannetti")
		Do fighterNickname.SetAt("The Animal","Patrick Williams")
		Do fighterNickname.SetAt("Cool Hand","Luke Sanders")
		Do fighterNickname.SetAt("Tanquinho","Augusto Mendes")
		Do fighterNickname.SetAt("The Pikey","Brett Johns")
		Do fighterNickname.SetAt("Carcacinha","Ricardo Ramos")
		Do fighterNickname.SetAt("Handsome","Kwan Ho Kwak")
		Do fighterNickname.SetAt("The Asian Sensation","Andre Soukhamthath")
		Do fighterNickname.SetAt("Firekid","Tom Duquesnoy")
		Do fighterNickname.SetAt("The Beefcake","Joseph Benavidez")
		Do fighterNickname.SetAt("Mighty Mouse","Demetrious Johnson (C)")
		Do fighterNickname.SetAt("Chicano","John Moraga")
		Do fighterNickname.SetAt("Uncle Creepy","Ian McCall")
		Do fighterNickname.SetAt("Formiga","Jussier Formiga")
		Do fighterNickname.SetAt("The Phenom","Sergio Pettis")
		Do fighterNickname.SetAt("Da Last Samurai","Louis Smolka")
		Do fighterNickname.SetAt("The Tazmexican Devil","Ray Borg")
		Do fighterNickname.SetAt("The Messenger","Henry Cejudo")
		Do fighterNickname.SetAt("2Tap","Neil Seery")
		Do fighterNickname.SetAt("10","Ben Nguyen")
		Do fighterNickname.SetAt("Baby Face","Ryan Benoit")
		Do fighterNickname.SetAt("Ulka","Ulka Sasaki")
		Do fighterNickname.SetAt("The Assassin Baby","Brandon Moreno")
		Do fighterNickname.SetAt("Kid Alex","Hector Sandoval")
		Do fighterNickname.SetAt("Da Demolition Man","Jenel Lausa")
		Do fighterNickname.SetAt("The Cannibal","Alexandre Pantoja")
		Do fighterNickname.SetAt("Showtime","Eric Shelton")
		Do fighterNickname.SetAt("Danger","Matt Schnell")
		Do fighterNickname.SetAt("The Gladiator","Magomed Bibulatov")
		Do fighterNickname.SetAt("The Monkey God","Jarred Brooks")
		Do fighterNickname.SetAt("Daico","Deiveson Alcântara")
		Do fighterNickname.SetAt("The Assassin","Askhan Mokhtarian")
		
		Quit fighterNickname.GetAt(pFighter)
	}
]]></Implementation>
</Method>
</Class>


<Class name="cosFaker.lib.core">
<TimeChanged>64364,54985.238226</TimeChanged>
<TimeCreated>64364,54430.726245</TimeCreated>

<Method name="Sample">
<ClassMethod>1</ClassMethod>
<FormalSpec>pList</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $List(pList, $Random($ListLength(pList)) + 1)
]]></Implementation>
</Method>

<Method name="MaskNumber">
<ClassMethod>1</ClassMethod>
<FormalSpec>pTemplate:%String,pMin:%Integer="",pMax:%Integer=""</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set pos = $Find(pTemplate,"#",0)
	
	While pos'=$$$NO {
		
		//If (pMin="" || pMax="") {
		Set value = $Random(10)
		/*
		} Else {
			Set value = ..Range(pMin, pMax)
		}
		*/
		
		Set pTemplate = $Extract(pTemplate,0,pos-2)_value_$Extract(pTemplate,pos,*),
			pos = $Find(pTemplate,"#",0)
	}
	Quit pTemplate
]]></Implementation>
</Method>

<Method name="Range">
<ClassMethod>1</ClassMethod>
<FormalSpec>pMin:%Integer=0,pMax:%Integer=10000</FormalSpec>
<Private>1</Private>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set value = pMin-10, dec = ""
	While ('..In(value, pMin, pMax)) {
		Set value = $Random(pMax + 1)
	}
	
	Quit value
]]></Implementation>
</Method>

<Method name="In">
<ClassMethod>1</ClassMethod>
<FormalSpec>pValue,pMin:%Integer,pMax:%Integer</FormalSpec>
<Private>1</Private>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit ((pValue>=pMin)&&(pValue<=pMax))
]]></Implementation>
</Method>
</Class>
</Export>
